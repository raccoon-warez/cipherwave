function e(){import.meta.url,import("_").catch(()=>1),async function*(){}().next()}!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver(e=>{for(const n of e)if("childList"===n.type)for(const e of n.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)}).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();const t=document.getElementById("mode-selection"),n=document.getElementById("node-panel"),o=document.getElementById("connection-panel"),c=document.getElementById("chat-panel"),a=document.getElementById("debug-panel"),r=document.getElementById("host-node-btn"),s=document.getElementById("join-network-btn"),i=document.getElementById("node-port"),d=document.getElementById("start-node-btn"),l=document.getElementById("stop-node-btn"),u=document.getElementById("node-status"),g=document.getElementById("room-id"),m=document.getElementById("generate-room"),p=document.getElementById("cipher-select"),y=document.getElementById("connect-btn"),f=document.getElementById("disconnect-btn"),h=document.getElementById("connection-status"),C=document.getElementById("messages"),E=document.getElementById("message-input"),S=document.getElementById("send-btn"),v=document.getElementById("chat-toggle"),b=document.getElementById("debug-toggle"),I=document.getElementById("debug-logs"),w=document.getElementById("clear-logs-btn"),L=document.getElementById("run-debug-btn"),k=document.getElementById("user-id-display"),D=document.getElementById("peer-status");let T=null,N=null,B=!1,x=!1,R="aes",P=null,A=null,O=null,J=new Map,W=0,M=null;const j={iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"},{urls:"stun:stun.stunprotocol.org:3478"},{urls:"stun:stun.voiparound.com"},{urls:"stun:stun.voipbuster.com"},{urls:"stun:stun.voipstunt.com"},{urls:"stun:stun.xten.com"},{urls:"turn:openrelay.metered.ca:80",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:openrelay.metered.ca:443?transport=tcp",username:"openrelayproject",credential:"openrelayproject"},{urls:"turn:freeturn.net:3478",username:"free",credential:"free"},{urls:"turn:freeturn.net:5349",username:"free",credential:"free"},{urls:"turns:freeturn.net:5349",username:"free",credential:"free"},{urls:"turn:turn.anyfirewall.com:443?transport=tcp",username:"webrtc",credential:"webrtc"},{urls:"turn:turn.bistri.com:80",username:"homeo",credential:"homeo"}],iceCandidatePoolSize:10,iceTransportPolicy:"all",bundlePolicy:"max-bundle",rtcpMuxPolicy:"require"};const F=j.iceServers.map(e=>!e.urls.startsWith("turn:")||e.username&&e.credential?e:(console.warn("TURN server missing credentials:",e.urls),null)).filter(e=>null!==e);j.iceServers=F;let G=[];const q=["ws://localhost:52178","ws://localhost:8081","ws://localhost:8082"],H=function(e,t){return new Promise((n,o)=>{O=new WebSocket(e),O.onopen=()=>{O.send(JSON.stringify({type:"join",room:t})),n()},O.onerror=e=>{console.error("Signaling socket error:",e),o(e)}})},U=function(e){O&&O.readyState===WebSocket.OPEN&&O.send(JSON.stringify({...e,room:A}))},K=function(e){O&&(O.onmessage=t=>{try{const n=JSON.parse(t.data);e(n)}catch(n){console.error("Signaling message parse error:",n)}})},V=function(){O&&(O.close(),O=null)},z=function(e){return new Promise(t=>{setTimeout(()=>{Y("Node Running on port "+e,"status-running"),d.disabled=!0,l.disabled=!1,t()},1e3)})},Q=function(){Y("Node Stopped","status-stopped"),d.disabled=!1,l.disabled=!0};function X(){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let t="";for(let n=0;n<20;n++)t+=e.charAt(Math.floor(62*Math.random()));return t}function Y(e,t){u.textContent=e,u.className=t}function Z(e,t){h.textContent=e,h.className=t,D&&(D.textContent=e,t.includes("connected")?D.style.color="#4CAF50":t.includes("disconnected")?D.style.color="#F44336":D.style.color="#FF9800")}function _(e){const t=(new Date).toLocaleTimeString();if(G.push("".concat(t,": ").concat(e)),console.log("[Connection Log] ".concat(t,": ").concat(e)),void 0!==I&&I){const n=document.createElement("div");n.className="debug-log-entry",n.textContent="[".concat(t,"] ").concat(e),I.appendChild(n),I.scrollTop=I.scrollHeight}}function $(e){e.onopen=()=>{B=!0,Z("Connected","status-connected"),y.disabled=!0,f.disabled=!1,o.classList.add("hidden"),c.classList.remove("hidden")},e.onclose=()=>{B=!1,Z("Disconnected","status-disconnected"),y.disabled=!1,f.disabled=!0,c.classList.add("hidden"),o.classList.remove("hidden")},e.onerror=e=>{_("Data channel error: ".concat(e.message)),console.error("Data channel error:",e),B&&(_("Attempting to restart data channel after error"),B=!1,Z("Data channel error, reconnecting...","status-disconnected"),setTimeout(()=>{T&&"connected"!==T.connectionState&&(_("Restarting ICE after data channel error"),T.restartIce())},2e3))},e.onmessage=e=>{try{const t=JSON.parse(e.data);if("message"===t.type){te(function(e,t){try{switch(t){case"aes":return CryptoJS.AES.decrypt(e,P).toString(CryptoJS.enc.Utf8);case"rsa":return atob(e);case"chacha20":return CryptoJS.AES.decrypt(e,P).toString(CryptoJS.enc.Utf8);default:return e}}catch(n){return console.error("Decryption error:",n),"[Decryption Error]"}}(t.content,R),"received")}else if("delivery-confirmation"===t.type){const e=document.querySelector('[data-message-id="'.concat(t.messageId,'"]'));if(e){const t=e.querySelector(".message-status");t&&(t.textContent="✓✓",t.className="message-status delivered")}}}catch(t){console.error("Error processing message:",t)}}}function ee(){const e=E.value.trim();if(e&&B&&N)try{const t=function(e,t){switch(t){case"aes":case"chacha20":return CryptoJS.AES.encrypt(e,P).toString();case"rsa":return btoa(e);default:return e}}(e,R),n=++W,o={type:"message",content:t,timestamp:Date.now(),messageId:n};N.send(JSON.stringify(o)),te(e,"sent",n),E.value="",J.set(n,{content:e,timestamp:Date.now()}),setTimeout(()=>{if(J.has(n)){const e=document.querySelector('[data-message-id="'.concat(n,'"]'));if(e){const t=e.querySelector(".message-status");t&&"✓"===t.textContent&&(t.textContent="⚠",t.className="message-status not-delivered")}J.delete(n)}},5e3)}catch(t){console.error("Error sending message:",t),alert("Failed to send message")}}function te(e,t,n=null){const o=document.createElement("div");o.className="message ".concat(t),n&&o.setAttribute("data-message-id",n);const c=document.createElement("div");c.className="message-content",c.textContent=e;const a=document.createElement("div");if(a.className="message-info",a.textContent=(new Date).toLocaleTimeString(),"sent"===t){const e=document.createElement("span");e.className="message-status",e.textContent="✓",a.appendChild(e)}o.appendChild(c),o.appendChild(a),C.appendChild(o),C.scrollTop=C.scrollHeight}r.addEventListener("click",()=>{t.classList.add("hidden"),n.classList.remove("hidden")}),s.addEventListener("click",()=>{t.classList.add("hidden"),o.classList.remove("hidden")}),d.addEventListener("click",async()=>{const e=i.value||8080;Y("Starting node...","status-stopped");try{await z(e)}catch(t){Y("Failed to start node","status-stopped")}}),l.addEventListener("click",()=>{Q()}),m.addEventListener("click",()=>{g.value=X()}),p.addEventListener("change",()=>{R=p.value}),y.addEventListener("click",async()=>{if(A=g.value.trim(),!A)return void alert("Please enter or generate a room ID");let e;Z("Discovering network...","status-disconnected");try{e=await async function(e){Z("Discovering network...","status-disconnected");for(const n of q)try{return Z("Trying ".concat(n,"..."),"status-disconnected"),await H(n,e),n}catch(t){console.log("Failed to connect to ".concat(n));continue}throw new Error("No available signaling servers found")}(A)}catch(t){return void Z("No available servers","status-disconnected")}await async function(){switch(R){case"aes":case"chacha20":P=CryptoJS.lib.WordArray.random(32);break;case"rsa":P="rsa-key-placeholder"}x&&setTimeout(()=>{U({type:"key",cipher:R,key:P.toString()})},2e3)}(),K(e=>{var t;"init"===e.type?(x=e.initiator,function(){try{Z("Establishing peer connection...","status-disconnected"),_("Starting WebRTC connection setup"),T=new RTCPeerConnection(j),_("RTCPeerConnection created");const e=setTimeout(()=>{"connected"!==T.connectionState&&"completed"!==T.connectionState&&(_("Connection timeout - no connection established"),Z("Connection timeout","status-disconnected"),"checking"!==T.iceConnectionState&&"disconnected"!==T.iceConnectionState||(_("Attempting ICE restart after timeout"),T.restartIce()))},6e4);T.onconnectionstatechange=()=>{_("Connection state: ".concat(T.connectionState)),Z("Connection: ".concat(T.connectionState),"status-disconnected"),"connected"!==T.connectionState&&"completed"!==T.connectionState||clearTimeout(e),"failed"===T.connectionState&&(_("Connection failed, attempting to restart ICE"),T.restartIce()),"disconnected"===T.connectionState&&(_("Connection disconnected, monitoring for reconnection"),setTimeout(()=>{"disconnected"===T.connectionState&&(_("Connection still disconnected, attempting to restart ICE"),T.restartIce())},1e4))},T.onsignalingstatechange=()=>{_("Signaling state: ".concat(T.signalingState))},T.oniceconnectionstatechange=()=>{_("ICE connection state: ".concat(T.iceConnectionState)),"failed"===T.iceConnectionState&&(_("ICE connection failed, attempting to restart ICE"),T.restartIce()),"disconnected"===T.iceConnectionState&&_("ICE connection disconnected, monitoring for reconnection")},T.onicegatheringstatechange=()=>{_("ICE gathering state: ".concat(T.iceGatheringState)),"gathering"===T.iceGatheringState&&setTimeout(()=>{"gathering"===T.iceGatheringState&&(_("ICE gathering timeout - forcing completion"),T.onicecandidate({candidate:null}))},3e4)},T.onicecandidate=e=>{e.candidate?(_("ICE candidate gathered: ".concat(e.candidate.type," (").concat(e.candidate.protocol,")")),U({type:"candidate",candidate:e.candidate})):_("ICE candidate gathering complete")},T.onicecandidateerror=e=>{_("ICE candidate error: ".concat(e.errorCode," - ").concat(e.errorText," (").concat(e.url,")")),console.error("ICE candidate error:",e),"complete"===T.iceGatheringState&&_("ICE gathering completed despite errors"),"gathering"===T.iceGatheringState&&(_("Attempting to restart ICE after candidate error"),setTimeout(()=>{"gathering"===T.iceGatheringState&&(_("Forcing ICE gathering completion after error"),T.onicecandidate({candidate:null}))},5e3))},x?(_("Creating data channel (initiator)"),N=T.createDataChannel("messaging",{ordered:!0,maxRetransmits:3}),$(N),_("Creating offer"),T.createOffer({offerToReceiveAudio:!1,offerToReceiveVideo:!1}).then(e=>(_("Offer created, setting local description"),T.setLocalDescription(e))).then(()=>{_("Local description set, sending offer"),U({type:"offer",offer:T.localDescription})}).catch(e=>{_("Error creating offer: ".concat(e.message)),console.error("Error creating offer:",e),Z("Connection failed","status-disconnected")})):(_("Waiting for data channel (non-initiator)"),T.ondatachannel=e=>{_("Data channel received"),N=e.channel,N.binaryType="arraybuffer",$(N)})}catch(e){_("Error starting connection: ".concat(e.message)),console.error("Error starting connection:",e),Z("Connection failed","status-disconnected")}}()):"key"===e.type?"key"===(t=e).type&&(P=CryptoJS.enc.Hex.parse(t.key),_("Encryption key received for ".concat(t.cipher))):function(e){if(!T)return void _("Received signaling message but no peer connection exists");switch(_("Received signaling message: ".concat(e.type)),e.type){case"offer":_("Processing offer"),T.setRemoteDescription(new RTCSessionDescription(e.offer)).then(()=>(_("Remote offer set, creating answer"),T.createAnswer())).then(e=>(_("Answer created, setting local description"),T.setLocalDescription(e))).then(()=>{_("Local answer set, sending answer"),U({type:"answer",answer:T.localDescription})}).catch(e=>{_("Error handling offer: ".concat(e.message)),console.error("Error handling offer:",e)});break;case"answer":_("Processing answer"),T.setRemoteDescription(new RTCSessionDescription(e.answer)).then(()=>{_("Remote answer set successfully")}).catch(e=>{_("Error handling answer: ".concat(e.message)),console.error("Error handling answer:",e)});break;case"candidate":_("Adding ICE candidate: ".concat(e.candidate.type)),T.addIceCandidate(new RTCIceCandidate(e.candidate)).then(()=>{_("ICE candidate added successfully")}).catch(e=>{_("Error adding ICE candidate: ".concat(e.message)),console.error("Error adding ICE candidate:",e)});break;default:_("Unknown signaling message type: ".concat(e.type))}}(e)})}),f.addEventListener("click",()=>{N&&N.close(),T&&T.close(),V(),B=!1,Z("Disconnected","status-disconnected"),y.disabled=!1,f.disabled=!0,c.classList.add("hidden"),o.classList.remove("hidden"),C.innerHTML="",J.clear()}),S.addEventListener("click",ee),E.addEventListener("keypress",e=>{"Enter"===e.key&&ee()}),document.addEventListener("DOMContentLoaded",()=>{Y("Node Stopped","status-stopped"),Z("Disconnected","status-disconnected"),g.value=X(),M=function(){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";let t="CW-";for(let n=0;n<6;n++)t+=e.charAt(Math.floor(36*Math.random()));return t}(),k&&(k.textContent=M),a.classList.remove("hidden")}),v.addEventListener("click",()=>{const e=document.querySelector("#messages");"none"===e.style.display?(e.style.display="block",v.textContent="▼"):(e.style.display="none",v.textContent="▶")}),b.addEventListener("click",()=>{const e=document.querySelector("#debug-content");"none"===e.style.display?(e.style.display="block",b.textContent="▼"):(e.style.display="none",b.textContent="▶")}),w.addEventListener("click",()=>{I.innerHTML="",G=[]}),L.addEventListener("click",()=>{!function(){const e=document.createElement("div");e.className="debug-log-entry";let t="=== CipherWave Debug Report ===\n";t+="Time: ".concat((new Date).toLocaleString(),"\n"),t+="User ID: ".concat(M||"Not generated","\n\n"),t+="WebRTC Support: ".concat(!!window.RTCPeerConnection,"\n"),t+="WebSocket Support: ".concat(!!window.WebSocket,"\n"),t+="Crypto Support: ".concat(!!window.crypto,"\n\n"),t+="Online Status: ".concat(navigator.onLine,"\n\n"),void 0!==O&&O?(t+="Signaling Server Status: ".concat(O.readyState,"\n"),t+="Signaling Server URL: ".concat(O.url||"N/A","\n\n")):t+="Signaling Server: Not connected\n\n";void 0!==T&&T?(t+="Peer Connection State: ".concat(T.connectionState,"\n"),t+="Signaling State: ".concat(T.signalingState,"\n"),t+="ICE Connection State: ".concat(T.iceConnectionState,"\n"),t+="ICE Gathering State: ".concat(T.iceGatheringState,"\n\n")):t+="Peer Connection: Not established\n\n";void 0!==N&&N?(t+="Data Channel State: ".concat(N.readyState,"\n"),t+="Data Channel Label: ".concat(N.label,"\n\n")):t+="Data Channel: Not established\n\n";if(void 0!==G&&G&&G.length>0){t+="=== Recent Connection Events ===\n";t+=G.slice(-10).join("\n")}else t+="=== No Connection Events ===\n";t+="\n=== End Debug Report ===",e.textContent=t,I.appendChild(e),I.scrollTop=I.scrollHeight}()});export{e as __vite_legacy_guard};
//# sourceMappingURL=index-DQ2Q4l-j.js.map
