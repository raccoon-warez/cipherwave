{"version":3,"file":"chunk-legacy-DcY-LF2r.js","sources":["../../src/managers/security-manager.js","../../src/managers/message-manager.js","../../src/managers/connection-manager.js","../../src/managers/ui-manager.js"],"sourcesContent":["// CipherWave Security Manager - Optimized with single crypto library\n// Uses only libsodium-wrappers for better performance and smaller bundle size\n\nimport sodium from 'libsodium-wrappers';\n\nexport class SecurityManager {\n    constructor() {\n        this.isInitialized = false;\n        this.identityKeys = null;\n        this.ephemeralKeys = null;\n        this.sessionKey = null;\n        this.peerPublicKey = null;\n        this.currentCipher = 'chacha20-poly1305';\n        \n        // Supported ciphers (all using libsodium)\n        this.supportedCiphers = {\n            'chacha20-poly1305': {\n                keyLength: 32,\n                nonceLength: 12,\n                encrypt: this.encryptChaCha20Poly1305.bind(this),\n                decrypt: this.decryptChaCha20Poly1305.bind(this)\n            },\n            'aes': {\n                keyLength: 32,\n                nonceLength: 12,\n                encrypt: this.encryptAES256GCM.bind(this),\n                decrypt: this.decryptAES256GCM.bind(this)\n            }\n        };\n        \n        // Performance metrics\n        this.metrics = {\n            encryptionTime: 0,\n            decryptionTime: 0,\n            keyGenerationTime: 0\n        };\n    }\n    \n    async initialize() {\n        console.log('üîê Initializing security manager with libsodium...');\n        const startTime = performance.now();\n        \n        try {\n            // Wait for libsodium to be ready\n            await sodium.ready;\n            \n            // Generate identity keys (Ed25519 for signing)\n            this.identityKeys = sodium.crypto_sign_keypair();\n            \n            // Generate ephemeral keys (X25519 for key exchange)\n            this.ephemeralKeys = sodium.crypto_box_keypair();\n            \n            this.isInitialized = true;\n            \n            this.metrics.keyGenerationTime = performance.now() - startTime;\n            console.log(`‚úÖ Security manager initialized (${this.metrics.keyGenerationTime.toFixed(2)}ms)`);\n            \n        } catch (error) {\n            console.error('‚ùå Failed to initialize security manager:', error);\n            throw new Error(`Security initialization failed: ${error.message}`);\n        }\n    }\n    \n    async setCipher(cipherName) {\n        if (!this.supportedCiphers[cipherName]) {\n            throw new Error(`Unsupported cipher: ${cipherName}`);\n        }\n        \n        this.currentCipher = cipherName;\n        console.log(`üîí Switched to cipher: ${cipherName}`);\n    }\n    \n    // Key exchange using X25519\n    async performKeyExchange(peerPublicKey) {\n        if (!this.isInitialized) {\n            throw new Error('Security manager not initialized');\n        }\n        \n        try {\n            // Convert peer public key if it's a string\n            const peerKey = typeof peerPublicKey === 'string' \n                ? sodium.from_hex(peerPublicKey)\n                : peerPublicKey;\n            \n            // Perform ECDH key exchange\n            const sharedSecret = sodium.crypto_box_beforenm(\n                peerKey,\n                this.ephemeralKeys.privateKey\n            );\n            \n            // Derive session key using HKDF\n            this.sessionKey = sodium.crypto_kdf_derive_from_key(\n                32, // 256-bit key\n                1,  // subkey ID\n                'CipherWv', // context (8 bytes)\n                sharedSecret\n            );\n            \n            this.peerPublicKey = peerKey;\n            \n            console.log('ü§ù Key exchange completed');\n            return sodium.to_hex(this.ephemeralKeys.publicKey);\n            \n        } catch (error) {\n            console.error('Key exchange failed:', error);\n            throw new Error(`Key exchange failed: ${error.message}`);\n        }\n    }\n    \n    // Encrypt message using current cipher\n    async encryptMessage(plaintext) {\n        if (!this.sessionKey) {\n            throw new Error('No session key available');\n        }\n        \n        const startTime = performance.now();\n        \n        try {\n            const cipher = this.supportedCiphers[this.currentCipher];\n            const result = await cipher.encrypt(plaintext);\n            \n            this.metrics.encryptionTime = performance.now() - startTime;\n            \n            return {\n                ciphertext: sodium.to_base64(result.ciphertext),\n                nonce: sodium.to_base64(result.nonce),\n                cipher: this.currentCipher,\n                timestamp: Date.now()\n            };\n            \n        } catch (error) {\n            console.error('Encryption failed:', error);\n            throw new Error(`Encryption failed: ${error.message}`);\n        }\n    }\n    \n    // Decrypt message\n    async decryptMessage(encryptedData) {\n        if (!this.sessionKey) {\n            throw new Error('No session key available');\n        }\n        \n        const startTime = performance.now();\n        \n        try {\n            const cipher = this.supportedCiphers[encryptedData.cipher];\n            if (!cipher) {\n                throw new Error(`Unsupported cipher: ${encryptedData.cipher}`);\n            }\n            \n            const ciphertext = sodium.from_base64(encryptedData.ciphertext);\n            const nonce = sodium.from_base64(encryptedData.nonce);\n            \n            const plaintext = await cipher.decrypt(ciphertext, nonce);\n            \n            this.metrics.decryptionTime = performance.now() - startTime;\n            \n            return {\n                text: sodium.to_string(plaintext),\n                timestamp: encryptedData.timestamp,\n                cipher: encryptedData.cipher\n            };\n            \n        } catch (error) {\n            console.error('Decryption failed:', error);\n            throw new Error(`Decryption failed: ${error.message}`);\n        }\n    }\n    \n    // ChaCha20-Poly1305 encryption (recommended)\n    async encryptChaCha20Poly1305(plaintext) {\n        const nonce = sodium.randombytes_buf(12); // 96-bit nonce\n        const message = sodium.from_string(plaintext);\n        \n        const ciphertext = sodium.crypto_secretbox_easy(\n            message,\n            nonce,\n            this.sessionKey\n        );\n        \n        return { ciphertext, nonce };\n    }\n    \n    async decryptChaCha20Poly1305(ciphertext, nonce) {\n        return sodium.crypto_secretbox_open_easy(\n            ciphertext,\n            nonce,\n            this.sessionKey\n        );\n    }\n    \n    // AES-256-GCM encryption (fallback)\n    async encryptAES256GCM(plaintext) {\n        const nonce = sodium.randombytes_buf(12); // 96-bit nonce\n        const message = sodium.from_string(plaintext);\n        \n        const ciphertext = sodium.crypto_aead_aes256gcm_encrypt(\n            message,\n            null, // no additional data\n            null, // no secret nonce\n            nonce,\n            this.sessionKey\n        );\n        \n        return { ciphertext, nonce };\n    }\n    \n    async decryptAES256GCM(ciphertext, nonce) {\n        return sodium.crypto_aead_aes256gcm_decrypt(\n            null, // no secret nonce\n            ciphertext,\n            null, // no additional data\n            nonce,\n            this.sessionKey\n        );\n    }\n    \n    // Utility methods\n    generateNonce(length = 12) {\n        return sodium.randombytes_buf(length);\n    }\n    \n    generateRoomId() {\n        return sodium.to_hex(sodium.randombytes_buf(16)).toUpperCase();\n    }\n    \n    getPublicKey() {\n        if (!this.ephemeralKeys) {\n            throw new Error('Keys not generated');\n        }\n        return sodium.to_hex(this.ephemeralKeys.publicKey);\n    }\n    \n    getIdentityPublicKey() {\n        if (!this.identityKeys) {\n            throw new Error('Identity keys not generated');\n        }\n        return sodium.to_hex(this.identityKeys.publicKey);\n    }\n    \n    // Sign data with identity key\n    signData(data) {\n        if (!this.identityKeys) {\n            throw new Error('Identity keys not available');\n        }\n        \n        const message = typeof data === 'string' ? sodium.from_string(data) : data;\n        return sodium.crypto_sign_detached(message, this.identityKeys.privateKey);\n    }\n    \n    // Verify signature\n    verifySignature(data, signature, publicKey) {\n        const message = typeof data === 'string' ? sodium.from_string(data) : data;\n        const sigBytes = typeof signature === 'string' ? sodium.from_hex(signature) : signature;\n        const pubKey = typeof publicKey === 'string' ? sodium.from_hex(publicKey) : publicKey;\n        \n        return sodium.crypto_sign_verify_detached(sigBytes, message, pubKey);\n    }\n    \n    // Get performance metrics\n    getMetrics() {\n        return { ...this.metrics };\n    }\n    \n    // Clear sensitive data\n    destroy() {\n        if (this.sessionKey) {\n            sodium.memzero(this.sessionKey);\n            this.sessionKey = null;\n        }\n        \n        if (this.ephemeralKeys) {\n            sodium.memzero(this.ephemeralKeys.privateKey);\n            this.ephemeralKeys = null;\n        }\n        \n        if (this.identityKeys) {\n            sodium.memzero(this.identityKeys.privateKey);\n            this.identityKeys = null;\n        }\n        \n        this.peerPublicKey = null;\n        this.isInitialized = false;\n        \n        console.log('üóëÔ∏è Security manager destroyed');\n    }\n}","// CipherWave Message Manager - Optimized for code splitting\n// Handles secure message encryption/decryption and delivery\n\nexport class MessageManager {\n    constructor(securityManager) {\n        this.securityManager = securityManager;\n        this.eventHandlers = new Map();\n        this.messageQueue = [];\n        this.pendingMessages = new Map();\n        this.messageCounter = 0;\n        \n        // Message delivery tracking\n        this.deliveryTimeout = 30000; // 30 seconds\n        this.retryAttempts = 3;\n        \n        // Performance metrics\n        this.metrics = {\n            messagesSent: 0,\n            messagesReceived: 0,\n            averageEncryptionTime: 0,\n            averageDecryptionTime: 0\n        };\n        \n        console.log('üí¨ Message manager initialized');\n    }\n    \n    // Event system\n    on(event, handler) {\n        if (!this.eventHandlers.has(event)) {\n            this.eventHandlers.set(event, []);\n        }\n        this.eventHandlers.get(event).push(handler);\n    }\n    \n    emit(event, data) {\n        const handlers = this.eventHandlers.get(event);\n        if (handlers) {\n            handlers.forEach(handler => {\n                try {\n                    handler(data);\n                } catch (error) {\n                    console.error(`Error in ${event} handler:`, error);\n                }\n            });\n        }\n    }\n    \n    // Encrypt a message for sending\n    async encryptMessage(plaintext, options = {}) {\n        if (!this.securityManager.isInitialized) {\n            throw new Error('Security manager not initialized');\n        }\n        \n        const startTime = performance.now();\n        \n        try {\n            // Create message metadata\n            const messageId = this.generateMessageId();\n            const timestamp = Date.now();\n            \n            // Prepare message payload\n            const messagePayload = {\n                id: messageId,\n                text: plaintext,\n                timestamp: timestamp,\n                type: options.type || 'text',\n                metadata: options.metadata || {}\n            };\n            \n            // Encrypt the message\n            const encryptedPayload = await this.securityManager.encryptMessage(\n                JSON.stringify(messagePayload)\n            );\n            \n            // Create final message structure\n            const encryptedMessage = {\n                id: messageId,\n                type: 'encrypted_message',\n                payload: encryptedPayload,\n                timestamp: timestamp,\n                requiresAck: options.requiresAck !== false // Default to true\n            };\n            \n            // Track encryption time\n            const encryptionTime = performance.now() - startTime;\n            this.updateEncryptionMetrics(encryptionTime);\n            \n            // Store for delivery tracking if acknowledgment required\n            if (encryptedMessage.requiresAck) {\n                this.trackMessageDelivery(messageId, encryptedMessage);\n            }\n            \n            this.metrics.messagesSent++;\n            \n            console.log(`üîí Message encrypted (${encryptionTime.toFixed(2)}ms)`);\n            return encryptedMessage;\n            \n        } catch (error) {\n            console.error('Message encryption failed:', error);\n            throw new Error(`Failed to encrypt message: ${error.message}`);\n        }\n    }\n    \n    // Decrypt a received message\n    async decryptMessage(encryptedMessage) {\n        if (!this.securityManager.isInitialized) {\n            throw new Error('Security manager not initialized');\n        }\n        \n        const startTime = performance.now();\n        \n        try {\n            // Handle different message types\n            if (encryptedMessage.type === 'encrypted_message') {\n                // Decrypt the payload\n                const decryptedPayload = await this.securityManager.decryptMessage(\n                    encryptedMessage.payload\n                );\n                \n                // Parse the message content\n                const messageContent = JSON.parse(decryptedPayload.text);\n                \n                // Send acknowledgment if required\n                if (encryptedMessage.requiresAck) {\n                    this.sendAcknowledgment(encryptedMessage.id);\n                }\n                \n                // Track decryption time\n                const decryptionTime = performance.now() - startTime;\n                this.updateDecryptionMetrics(decryptionTime);\n                \n                this.metrics.messagesReceived++;\n                \n                // Emit decrypted message event\n                const decryptedMessage = {\n                    id: messageContent.id,\n                    text: messageContent.text,\n                    timestamp: messageContent.timestamp,\n                    type: messageContent.type,\n                    metadata: messageContent.metadata || {},\n                    decrypted: true,\n                    decryptionTime: decryptionTime\n                };\n                \n                this.emit('messageDecrypted', decryptedMessage);\n                \n                console.log(`üîì Message decrypted (${decryptionTime.toFixed(2)}ms)`);\n                return decryptedMessage;\n                \n            } else if (encryptedMessage.type === 'acknowledgment') {\n                // Handle message acknowledgment\n                this.handleAcknowledgment(encryptedMessage.messageId);\n                return null;\n                \n            } else if (encryptedMessage.type === 'ping') {\n                // Handle ping message\n                this.handlePing(encryptedMessage);\n                return null;\n                \n            } else {\n                console.warn('Unknown message type:', encryptedMessage.type);\n                return null;\n            }\n            \n        } catch (error) {\n            console.error('Message decryption failed:', error);\n            \n            // Send error acknowledgment\n            if (encryptedMessage.requiresAck) {\n                this.sendErrorAcknowledgment(encryptedMessage.id, error.message);\n            }\n            \n            throw new Error(`Failed to decrypt message: ${error.message}`);\n        }\n    }\n    \n    // Generate unique message ID\n    generateMessageId() {\n        this.messageCounter++;\n        return `msg_${Date.now()}_${this.messageCounter}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    // Track message delivery for acknowledgment\n    trackMessageDelivery(messageId, message) {\n        const deliveryInfo = {\n            message: message,\n            sentAt: Date.now(),\n            attempts: 0,\n            maxAttempts: this.retryAttempts\n        };\n        \n        this.pendingMessages.set(messageId, deliveryInfo);\n        \n        // Set delivery timeout\n        setTimeout(() => {\n            if (this.pendingMessages.has(messageId)) {\n                this.handleDeliveryTimeout(messageId);\n            }\n        }, this.deliveryTimeout);\n    }\n    \n    // Send acknowledgment for received message\n    sendAcknowledgment(messageId) {\n        const ackMessage = {\n            type: 'acknowledgment',\n            messageId: messageId,\n            timestamp: Date.now(),\n            status: 'delivered'\n        };\n        \n        this.emit('sendAcknowledgment', ackMessage);\n    }\n    \n    // Send error acknowledgment\n    sendErrorAcknowledgment(messageId, errorMessage) {\n        const errorAck = {\n            type: 'acknowledgment',\n            messageId: messageId,\n            timestamp: Date.now(),\n            status: 'error',\n            error: errorMessage\n        };\n        \n        this.emit('sendAcknowledgment', errorAck);\n    }\n    \n    // Handle received acknowledgment\n    handleAcknowledgment(messageId) {\n        if (this.pendingMessages.has(messageId)) {\n            const deliveryInfo = this.pendingMessages.get(messageId);\n            this.pendingMessages.delete(messageId);\n            \n            console.log(`‚úÖ Message ${messageId} delivered`);\n            this.emit('messageDelivered', {\n                messageId: messageId,\n                deliveryTime: Date.now() - deliveryInfo.sentAt\n            });\n        }\n    }\n    \n    // Handle delivery timeout\n    handleDeliveryTimeout(messageId) {\n        const deliveryInfo = this.pendingMessages.get(messageId);\n        \n        if (deliveryInfo) {\n            deliveryInfo.attempts++;\n            \n            if (deliveryInfo.attempts < deliveryInfo.maxAttempts) {\n                console.log(`üîÑ Retrying message ${messageId} (attempt ${deliveryInfo.attempts})`);\n                this.emit('retryMessage', deliveryInfo.message);\n                \n                // Reset timeout for next attempt\n                setTimeout(() => {\n                    if (this.pendingMessages.has(messageId)) {\n                        this.handleDeliveryTimeout(messageId);\n                    }\n                }, this.deliveryTimeout);\n                \n            } else {\n                console.error(`‚ùå Message ${messageId} delivery failed after ${deliveryInfo.attempts} attempts`);\n                this.pendingMessages.delete(messageId);\n                \n                this.emit('messageDeliveryFailed', {\n                    messageId: messageId,\n                    attempts: deliveryInfo.attempts,\n                    message: deliveryInfo.message\n                });\n            }\n        }\n    }\n    \n    // Handle ping message\n    handlePing(pingMessage) {\n        // Respond with pong\n        const pongMessage = {\n            type: 'pong',\n            originalTimestamp: pingMessage.timestamp,\n            timestamp: Date.now()\n        };\n        \n        this.emit('sendPong', pongMessage);\n    }\n    \n    // Update encryption metrics\n    updateEncryptionMetrics(encryptionTime) {\n        if (this.metrics.messagesSent === 0) {\n            this.metrics.averageEncryptionTime = encryptionTime;\n        } else {\n            this.metrics.averageEncryptionTime = \n                (this.metrics.averageEncryptionTime * (this.metrics.messagesSent - 1) + encryptionTime) / \n                this.metrics.messagesSent;\n        }\n    }\n    \n    // Update decryption metrics\n    updateDecryptionMetrics(decryptionTime) {\n        if (this.metrics.messagesReceived === 0) {\n            this.metrics.averageDecryptionTime = decryptionTime;\n        } else {\n            this.metrics.averageDecryptionTime = \n                (this.metrics.averageDecryptionTime * (this.metrics.messagesReceived - 1) + decryptionTime) / \n                this.metrics.messagesReceived;\n        }\n    }\n    \n    // Get pending messages count\n    getPendingMessagesCount() {\n        return this.pendingMessages.size;\n    }\n    \n    // Get message statistics\n    getMetrics() {\n        return {\n            ...this.metrics,\n            pendingMessages: this.getPendingMessagesCount()\n        };\n    }\n    \n    // Clear all pending messages\n    clearPendingMessages() {\n        this.pendingMessages.clear();\n        console.log('üóëÔ∏è Cleared all pending messages');\n    }\n    \n    // Destroy message manager\n    destroy() {\n        this.clearPendingMessages();\n        this.messageQueue = [];\n        this.eventHandlers.clear();\n        this.messageCounter = 0;\n        console.log('üóëÔ∏è Message manager destroyed');\n    }\n}","// CipherWave Connection Manager - Optimized for code splitting\n// Uses simple-peer for WebRTC with enhanced error handling\n\nimport Peer from 'simple-peer';\n\nexport class ConnectionManager {\n    constructor(configuration = {}) {\n        this.configuration = {\n            initiator: false,\n            trickle: true,\n            ...configuration\n        };\n        \n        this.peer = null;\n        this.isConnected = false;\n        this.isConnecting = false;\n        this.connectionState = 'new';\n        this.eventHandlers = new Map();\n        \n        // Connection management\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 5;\n        this.reconnectDelay = 1000;\n        this.connectionTimeout = null;\n        this.healthCheckInterval = null;\n        \n        // Signaling\n        this.signalingSocket = null;\n        this.currentRoom = null;\n        \n        // Performance tracking\n        this.stats = {\n            connectTime: 0,\n            packetsLost: 0,\n            roundTripTime: 0,\n            dataChannelState: 'connecting'\n        };\n        \n        console.log('üîó Connection manager initialized');\n    }\n    \n    // Event system\n    on(event, handler) {\n        if (!this.eventHandlers.has(event)) {\n            this.eventHandlers.set(event, []);\n        }\n        this.eventHandlers.get(event).push(handler);\n    }\n    \n    emit(event, data) {\n        const handlers = this.eventHandlers.get(event);\n        if (handlers) {\n            handlers.forEach(handler => {\n                try {\n                    handler(data);\n                } catch (error) {\n                    console.error(`Error in ${event} handler:`, error);\n                }\n            });\n        }\n    }\n    \n    // Connect to a room\n    async connect(roomId, isInitiator = false) {\n        if (this.isConnecting || this.isConnected) {\n            throw new Error('Connection already in progress or established');\n        }\n        \n        console.log(`üîó Connecting to room: ${roomId} (initiator: ${isInitiator})`);\n        const startTime = performance.now();\n        \n        try {\n            this.isConnecting = true;\n            this.currentRoom = roomId;\n            \n            // Connect to signaling server\n            await this.connectToSignalingServer();\n            \n            // Join room\n            await this.joinRoom(roomId);\n            \n            // Initialize WebRTC peer\n            await this.initializePeer(isInitiator);\n            \n            // Set connection timeout\n            this.connectionTimeout = setTimeout(() => {\n                if (!this.isConnected) {\n                    this.handleConnectionTimeout();\n                }\n            }, 30000); // 30 second timeout\n            \n            this.stats.connectTime = performance.now() - startTime;\n            \n        } catch (error) {\n            this.isConnecting = false;\n            console.error('Connection failed:', error);\n            this.emit('error', error);\n            throw error;\n        }\n    }\n    \n    // Initialize WebRTC peer connection\n    async initializePeer(isInitiator) {\n        this.peer = new Peer({\n            initiator: isInitiator,\n            trickle: true,\n            config: this.configuration\n        });\n        \n        // Set up peer event handlers\n        this.peer.on('signal', (signal) => {\n            console.log('üì° Sending signal:', signal.type);\n            this.sendSignal(signal);\n        });\n        \n        this.peer.on('connect', () => {\n            console.log('‚úÖ WebRTC connection established');\n            this.isConnected = true;\n            this.isConnecting = false;\n            this.connectionState = 'connected';\n            this.stats.dataChannelState = 'open';\n            \n            if (this.connectionTimeout) {\n                clearTimeout(this.connectionTimeout);\n                this.connectionTimeout = null;\n            }\n            \n            this.startHealthCheck();\n            this.emit('connected');\n        });\n        \n        this.peer.on('data', (data) => {\n            try {\n                const message = JSON.parse(data.toString());\n                this.emit('dataReceived', message);\n            } catch (error) {\n                console.error('Failed to parse received data:', error);\n            }\n        });\n        \n        this.peer.on('close', () => {\n            console.log('üîå WebRTC connection closed');\n            this.handleDisconnection();\n        });\n        \n        this.peer.on('error', (error) => {\n            console.error('WebRTC error:', error);\n            this.emit('error', error);\n            \n            // Attempt reconnection for certain errors\n            if (this.shouldAttemptReconnect(error)) {\n                this.scheduleReconnect();\n            }\n        });\n    }\n    \n    // Connect to signaling server\n    async connectToSignalingServer() {\n        return new Promise((resolve, reject) => {\n            try {\n                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n                const host = window.location.host;\n                const wsUrl = `${protocol}//${host}`;\n                \n                this.signalingSocket = new WebSocket(wsUrl);\n                \n                this.signalingSocket.onopen = () => {\n                    console.log('üì° Connected to signaling server');\n                    resolve();\n                };\n                \n                this.signalingSocket.onmessage = (event) => {\n                    this.handleSignalingMessage(JSON.parse(event.data));\n                };\n                \n                this.signalingSocket.onclose = () => {\n                    console.log('üì° Signaling server connection closed');\n                    if (this.isConnected) {\n                        this.scheduleReconnect();\n                    }\n                };\n                \n                this.signalingSocket.onerror = (error) => {\n                    console.error('Signaling server error:', error);\n                    reject(error);\n                };\n                \n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n    \n    // Join a room on the signaling server\n    async joinRoom(roomId) {\n        return new Promise((resolve, reject) => {\n            if (!this.signalingSocket || this.signalingSocket.readyState !== WebSocket.OPEN) {\n                reject(new Error('Signaling server not connected'));\n                return;\n            }\n            \n            const joinMessage = {\n                type: 'join',\n                room: roomId\n            };\n            \n            this.signalingSocket.send(JSON.stringify(joinMessage));\n            \n            // Wait for join confirmation\n            const timeout = setTimeout(() => {\n                reject(new Error('Room join timeout'));\n            }, 10000);\n            \n            const originalHandler = this.handleSignalingMessage.bind(this);\n            this.handleSignalingMessage = (message) => {\n                if (message.type === 'joined' && message.room === roomId) {\n                    clearTimeout(timeout);\n                    this.handleSignalingMessage = originalHandler;\n                    resolve();\n                } else if (message.type === 'error') {\n                    clearTimeout(timeout);\n                    this.handleSignalingMessage = originalHandler;\n                    reject(new Error(message.message));\n                } else {\n                    originalHandler(message);\n                }\n            };\n        });\n    }\n    \n    // Handle signaling messages\n    handleSignalingMessage(message) {\n        switch (message.type) {\n            case 'signal':\n                if (this.peer) {\n                    console.log('üì° Received signal:', message.signal.type);\n                    this.peer.signal(message.signal);\n                }\n                break;\n                \n            case 'peer-joined':\n                console.log('üëã Peer joined the room');\n                if (!this.peer && !this.isConnecting) {\n                    // Become the initiator if we're already in the room\n                    this.initializePeer(true);\n                }\n                break;\n                \n            case 'peer-left':\n                console.log('üëã Peer left the room');\n                this.handleDisconnection();\n                break;\n                \n            default:\n                console.log('Unknown signaling message:', message);\n        }\n    }\n    \n    // Send signaling data\n    sendSignal(signal) {\n        if (this.signalingSocket && this.signalingSocket.readyState === WebSocket.OPEN) {\n            const message = {\n                type: 'signal',\n                room: this.currentRoom,\n                signal: signal\n            };\n            this.signalingSocket.send(JSON.stringify(message));\n        }\n    }\n    \n    // Send data through WebRTC\n    async sendData(data) {\n        if (!this.isConnected || !this.peer) {\n            throw new Error('Not connected');\n        }\n        \n        try {\n            const jsonData = JSON.stringify(data);\n            this.peer.send(jsonData);\n        } catch (error) {\n            console.error('Failed to send data:', error);\n            throw error;\n        }\n    }\n    \n    // Start health check\n    startHealthCheck() {\n        this.healthCheckInterval = setInterval(() => {\n            if (this.isConnected && this.peer) {\n                // Update connection stats\n                this.updateConnectionStats();\n                \n                // Send ping if needed\n                this.sendPing();\n            }\n        }, 30000); // Check every 30 seconds\n    }\n    \n    // Update connection statistics\n    updateConnectionStats() {\n        if (this.peer && this.peer._pc) {\n            this.peer._pc.getStats().then(stats => {\n                stats.forEach(report => {\n                    if (report.type === 'candidate-pair' && report.state === 'succeeded') {\n                        this.stats.roundTripTime = report.currentRoundTripTime * 1000; // Convert to ms\n                    } else if (report.type === 'transport') {\n                        this.stats.packetsLost = report.packetsLost || 0;\n                    }\n                });\n            }).catch(error => {\n                console.warn('Failed to get connection stats:', error);\n            });\n        }\n    }\n    \n    // Send ping for connection health check\n    sendPing() {\n        try {\n            this.sendData({\n                type: 'ping',\n                timestamp: Date.now()\n            });\n        } catch (error) {\n            console.warn('Failed to send ping:', error);\n        }\n    }\n    \n    // Handle disconnection\n    handleDisconnection() {\n        this.isConnected = false;\n        this.isConnecting = false;\n        this.connectionState = 'disconnected';\n        this.stats.dataChannelState = 'closed';\n        \n        if (this.healthCheckInterval) {\n            clearInterval(this.healthCheckInterval);\n            this.healthCheckInterval = null;\n        }\n        \n        if (this.connectionTimeout) {\n            clearTimeout(this.connectionTimeout);\n            this.connectionTimeout = null;\n        }\n        \n        this.emit('disconnected');\n    }\n    \n    // Handle connection timeout\n    handleConnectionTimeout() {\n        console.error('‚è∞ Connection timeout');\n        this.handleDisconnection();\n        this.emit('error', new Error('Connection timeout'));\n    }\n    \n    // Determine if we should attempt reconnection\n    shouldAttemptReconnect(error) {\n        // Don't reconnect for certain error types\n        const nonRecoverableErrors = ['ERR_CONNECTION_REFUSED', 'ERR_NETWORK'];\n        return !nonRecoverableErrors.includes(error.code) && \n               this.reconnectAttempts < this.maxReconnectAttempts;\n    }\n    \n    // Schedule reconnection attempt\n    scheduleReconnect() {\n        if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n            console.error('‚ùå Max reconnection attempts reached');\n            this.emit('error', new Error('Max reconnection attempts reached'));\n            return;\n        }\n        \n        const delay = Math.min(this.reconnectDelay * Math.pow(2, this.reconnectAttempts), 30000);\n        this.reconnectAttempts++;\n        \n        console.log(`üîÑ Scheduling reconnect attempt ${this.reconnectAttempts} in ${delay}ms`);\n        \n        setTimeout(() => {\n            if (!this.isConnected && this.currentRoom) {\n                this.connect(this.currentRoom, false).catch(error => {\n                    console.error('Reconnection failed:', error);\n                    this.scheduleReconnect();\n                });\n            }\n        }, delay);\n    }\n    \n    // Disconnect\n    async disconnect() {\n        console.log('üîå Disconnecting...');\n        \n        this.isConnecting = false;\n        this.reconnectAttempts = 0;\n        \n        if (this.healthCheckInterval) {\n            clearInterval(this.healthCheckInterval);\n            this.healthCheckInterval = null;\n        }\n        \n        if (this.connectionTimeout) {\n            clearTimeout(this.connectionTimeout);\n            this.connectionTimeout = null;\n        }\n        \n        if (this.peer) {\n            this.peer.destroy();\n            this.peer = null;\n        }\n        \n        if (this.signalingSocket) {\n            this.signalingSocket.close();\n            this.signalingSocket = null;\n        }\n        \n        this.handleDisconnection();\n    }\n    \n    // Get connection statistics\n    getStats() {\n        return { ...this.stats };\n    }\n    \n    // Get connection state\n    getState() {\n        return {\n            isConnected: this.isConnected,\n            isConnecting: this.isConnecting,\n            connectionState: this.connectionState,\n            currentRoom: this.currentRoom,\n            reconnectAttempts: this.reconnectAttempts\n        };\n    }\n}","// CipherWave UI Manager - Lightweight core UI management\n// Heavy UI components (file-manager, voice-manager) are dynamically loaded\n\nexport class UIManager {\n    constructor() {\n        this.eventHandlers = new Map();\n        this.elements = {};\n        this.isInitialized = false;\n        this.currentTheme = 'dark';\n        \n        // UI state\n        this.connectionStatus = 'disconnected';\n        this.currentRoom = null;\n        \n        console.log('üé® UI manager initialized');\n    }\n    \n    // Event system\n    on(event, handler) {\n        if (!this.eventHandlers.has(event)) {\n            this.eventHandlers.set(event, []);\n        }\n        this.eventHandlers.get(event).push(handler);\n    }\n    \n    emit(event, data) {\n        const handlers = this.eventHandlers.get(event);\n        if (handlers) {\n            handlers.forEach(handler => {\n                try {\n                    handler(data);\n                } catch (error) {\n                    console.error(`Error in ${event} handler:`, error);\n                }\n            });\n        }\n    }\n    \n    // Initialize UI elements and event listeners\n    async initialize() {\n        console.log('üé® Initializing UI...');\n        \n        try {\n            // Cache DOM elements\n            this.cacheElements();\n            \n            // Set up event listeners\n            this.setupEventListeners();\n            \n            // Initialize UI state\n            this.initializeUIState();\n            \n            // Set up responsive design\n            this.setupResponsiveDesign();\n            \n            this.isInitialized = true;\n            console.log('‚úÖ UI initialized successfully');\n            \n        } catch (error) {\n            console.error('‚ùå Failed to initialize UI:', error);\n            throw error;\n        }\n    }\n    \n    // Cache frequently used DOM elements\n    cacheElements() {\n        this.elements = {\n            // Mode selection\n            modeSelection: document.getElementById('mode-selection'),\n            hostNodeBtn: document.getElementById('host-node-btn'),\n            joinNetworkBtn: document.getElementById('join-network-btn'),\n            \n            // Connection panel\n            connectionPanel: document.getElementById('connection-panel'),\n            roomInput: document.getElementById('room-id'),\n            generateRoomBtn: document.getElementById('generate-room'),\n            cipherSelect: document.getElementById('cipher-select'),\n            connectBtn: document.getElementById('connect-btn'),\n            disconnectBtn: document.getElementById('disconnect-btn'),\n            connectionStatus: document.getElementById('connection-status'),\n            \n            // Chat panel\n            chatPanel: document.getElementById('chat-panel'),\n            messagesContainer: document.getElementById('messages'),\n            messageInput: document.getElementById('message-input'),\n            sendBtn: document.getElementById('send-btn'),\n            \n            // Debug panel\n            debugLogs: document.getElementById('debug-logs'),\n            clearLogsBtn: document.getElementById('clear-logs-btn'),\n            runDebugBtn: document.getElementById('run-debug-btn'),\n            \n            // User info\n            userIdDisplay: document.getElementById('user-id-display'),\n            peerStatus: document.getElementById('peer-status')\n        };\n        \n        // Validate required elements\n        const requiredElements = ['connectBtn', 'disconnectBtn', 'messageInput', 'sendBtn'];\n        for (const elementId of requiredElements) {\n            if (!this.elements[elementId]) {\n                throw new Error(`Required UI element not found: ${elementId}`);\n            }\n        }\n    }\n    \n    // Set up event listeners for UI interactions\n    setupEventListeners() {\n        // Connection buttons\n        if (this.elements.connectBtn) {\n            this.elements.connectBtn.addEventListener('click', () => {\n                const roomId = this.elements.roomInput?.value.trim();\n                const cipher = this.elements.cipherSelect?.value || 'chacha20-poly1305';\n                \n                if (!roomId) {\n                    this.showError('Please enter a room ID');\n                    return;\n                }\n                \n                this.emit('connect', roomId, cipher);\n            });\n        }\n        \n        if (this.elements.disconnectBtn) {\n            this.elements.disconnectBtn.addEventListener('click', () => {\n                this.emit('disconnect');\n            });\n        }\n        \n        // Generate room ID\n        if (this.elements.generateRoomBtn) {\n            this.elements.generateRoomBtn.addEventListener('click', () => {\n                const roomId = this.generateRoomId();\n                if (this.elements.roomInput) {\n                    this.elements.roomInput.value = roomId;\n                }\n            });\n        }\n        \n        // Message sending\n        if (this.elements.sendBtn) {\n            this.elements.sendBtn.addEventListener('click', () => {\n                this.sendMessage();\n            });\n        }\n        \n        if (this.elements.messageInput) {\n            this.elements.messageInput.addEventListener('keypress', (e) => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                    e.preventDefault();\n                    this.sendMessage();\n                }\n            });\n            \n            // Auto-resize textarea\n            this.elements.messageInput.addEventListener('input', () => {\n                this.autoResizeTextarea(this.elements.messageInput);\n            });\n        }\n        \n        // Debug controls\n        if (this.elements.clearLogsBtn) {\n            this.elements.clearLogsBtn.addEventListener('click', () => {\n                this.clearDebugLogs();\n            });\n        }\n        \n        if (this.elements.runDebugBtn) {\n            this.elements.runDebugBtn.addEventListener('click', () => {\n                this.runDebugDiagnostics();\n            });\n        }\n        \n        // Advanced feature buttons (dynamically loaded)\n        this.setupAdvancedFeatureButtons();\n    }\n    \n    // Set up buttons for dynamically loaded features\n    setupAdvancedFeatureButtons() {\n        // File sharing button\n        const fileBtn = document.querySelector('[data-feature=\"file-sharing\"]');\n        if (fileBtn) {\n            fileBtn.addEventListener('click', () => {\n                this.emit('loadFileManager');\n            });\n        }\n        \n        // Voice message button\n        const voiceBtn = document.querySelector('[data-feature=\"voice-messages\"]');\n        if (voiceBtn) {\n            voiceBtn.addEventListener('click', () => {\n                this.emit('loadVoiceManager');\n            });\n        }\n    }\n    \n    // Initialize UI state\n    initializeUIState() {\n        this.updateConnectionStatus('disconnected');\n        this.generateRandomRoomId();\n        \n        // Set default cipher\n        if (this.elements.cipherSelect) {\n            this.elements.cipherSelect.value = 'chacha20-poly1305';\n        }\n        \n        // Focus room input\n        if (this.elements.roomInput) {\n            this.elements.roomInput.focus();\n        }\n    }\n    \n    // Set up responsive design handlers\n    setupResponsiveDesign() {\n        // Handle viewport changes\n        window.addEventListener('resize', () => {\n            this.handleViewportChange();\n        });\n        \n        // Handle orientation changes on mobile\n        window.addEventListener('orientationchange', () => {\n            setTimeout(() => this.handleViewportChange(), 100);\n        });\n        \n        // Initial viewport setup\n        this.handleViewportChange();\n    }\n    \n    // Handle viewport changes\n    handleViewportChange() {\n        const isMobile = window.innerWidth <= 768;\n        document.body.classList.toggle('mobile', isMobile);\n    }\n    \n    // Send message through the input field\n    sendMessage() {\n        const messageText = this.elements.messageInput?.value.trim();\n        \n        if (!messageText) {\n            return;\n        }\n        \n        if (messageText.length > 5000) {\n            this.showError('Message too long (max 5000 characters)');\n            return;\n        }\n        \n        this.emit('sendMessage', messageText);\n        \n        // Clear input\n        if (this.elements.messageInput) {\n            this.elements.messageInput.value = '';\n            this.autoResizeTextarea(this.elements.messageInput);\n        }\n    }\n    \n    // Update connection status display\n    updateConnectionStatus(status) {\n        this.connectionStatus = status;\n        \n        if (this.elements.connectionStatus) {\n            this.elements.connectionStatus.textContent = this.getStatusText(status);\n            this.elements.connectionStatus.className = `status status-${status}`;\n        }\n        \n        // Update button states\n        const isConnected = status === 'connected';\n        const isConnecting = status === 'connecting';\n        \n        if (this.elements.connectBtn) {\n            this.elements.connectBtn.disabled = isConnected || isConnecting;\n            this.elements.connectBtn.textContent = isConnecting ? 'Connecting...' : 'Connect';\n        }\n        \n        if (this.elements.disconnectBtn) {\n            this.elements.disconnectBtn.disabled = !isConnected && !isConnecting;\n        }\n        \n        if (this.elements.messageInput) {\n            this.elements.messageInput.disabled = !isConnected;\n        }\n        \n        if (this.elements.sendBtn) {\n            this.elements.sendBtn.disabled = !isConnected;\n        }\n        \n        // Show/hide chat panel\n        if (this.elements.chatPanel) {\n            this.elements.chatPanel.classList.toggle('hidden', !isConnected);\n        }\n    }\n    \n    // Get human-readable status text\n    getStatusText(status) {\n        const statusTexts = {\n            disconnected: 'Disconnected',\n            connecting: 'Connecting...',\n            connected: 'Connected',\n            error: 'Connection Error'\n        };\n        \n        return statusTexts[status] || status;\n    }\n    \n    // Display a message in the chat\n    displayMessage(message) {\n        if (!this.elements.messagesContainer) {\n            return;\n        }\n        \n        const messageElement = this.createMessageElement(message);\n        this.elements.messagesContainer.appendChild(messageElement);\n        \n        // Auto-scroll to bottom\n        this.scrollToBottom();\n        \n        // Remove encryption notice if this is the first message\n        this.removeEncryptionNotice();\n    }\n    \n    // Create message element\n    createMessageElement(message) {\n        const messageDiv = document.createElement('div');\n        messageDiv.className = `message ${message.sender === 'self' ? 'message-sent' : 'message-received'}`;\n        \n        const timestamp = new Date(message.timestamp).toLocaleTimeString();\n        \n        messageDiv.innerHTML = `\n            <div class=\"message-content\">\n                <div class=\"message-text\">${this.escapeHtml(message.text)}</div>\n                <div class=\"message-time\">${timestamp}</div>\n                ${message.encrypted ? '<div class=\"message-encrypted\"><i class=\"fas fa-lock\"></i></div>' : ''}\n            </div>\n        `;\n        \n        return messageDiv;\n    }\n    \n    // Remove encryption notice from empty chat\n    removeEncryptionNotice() {\n        const notice = this.elements.messagesContainer?.querySelector('.encryption-notice');\n        if (notice) {\n            notice.remove();\n        }\n    }\n    \n    // Scroll messages container to bottom\n    scrollToBottom() {\n        if (this.elements.messagesContainer) {\n            this.elements.messagesContainer.scrollTop = this.elements.messagesContainer.scrollHeight;\n        }\n    }\n    \n    // Show error message\n    showError(message) {\n        // Create error notification\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'error-notification';\n        errorDiv.innerHTML = `\n            <i class=\"fas fa-exclamation-triangle\"></i>\n            <span>${this.escapeHtml(message)}</span>\n            <button class=\"error-close\" onclick=\"this.parentElement.remove()\">√ó</button>\n        `;\n        \n        document.body.appendChild(errorDiv);\n        \n        // Auto-remove after 5 seconds\n        setTimeout(() => {\n            if (errorDiv.parentElement) {\n                errorDiv.remove();\n            }\n        }, 5000);\n    }\n    \n    // Show success message\n    showSuccess(message) {\n        // Create success notification\n        const successDiv = document.createElement('div');\n        successDiv.className = 'success-notification';\n        successDiv.innerHTML = `\n            <i class=\"fas fa-check-circle\"></i>\n            <span>${this.escapeHtml(message)}</span>\n            <button class=\"success-close\" onclick=\"this.parentElement.remove()\">√ó</button>\n        `;\n        \n        document.body.appendChild(successDiv);\n        \n        // Auto-remove after 3 seconds\n        setTimeout(() => {\n            if (successDiv.parentElement) {\n                successDiv.remove();\n            }\n        }, 3000);\n    }\n    \n    // Generate random room ID\n    generateRandomRoomId() {\n        const roomId = this.generateRoomId();\n        if (this.elements.roomInput) {\n            this.elements.roomInput.value = roomId;\n        }\n    }\n    \n    // Generate room ID\n    generateRoomId() {\n        return Array.from(crypto.getRandomValues(new Uint8Array(8)))\n            .map(b => b.toString(16).padStart(2, '0'))\n            .join('').toUpperCase();\n    }\n    \n    // Auto-resize textarea\n    autoResizeTextarea(textarea) {\n        textarea.style.height = 'auto';\n        textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';\n    }\n    \n    // Clear debug logs\n    clearDebugLogs() {\n        if (this.elements.debugLogs) {\n            this.elements.debugLogs.textContent = 'CipherWave Debug Console - Ready';\n        }\n    }\n    \n    // Add debug log entry\n    addDebugLog(message, type = 'info') {\n        if (!this.elements.debugLogs) {\n            return;\n        }\n        \n        const timestamp = new Date().toLocaleTimeString();\n        const logEntry = `[${timestamp}] ${type.toUpperCase()}: ${message}`;\n        \n        this.elements.debugLogs.textContent += '\\n' + logEntry;\n        this.elements.debugLogs.scrollTop = this.elements.debugLogs.scrollHeight;\n    }\n    \n    // Run debug diagnostics\n    runDebugDiagnostics() {\n        this.addDebugLog('Running diagnostics...', 'info');\n        \n        // Check WebRTC support\n        if (window.RTCPeerConnection) {\n            this.addDebugLog('‚úÖ WebRTC supported', 'success');\n        } else {\n            this.addDebugLog('‚ùå WebRTC not supported', 'error');\n        }\n        \n        // Check crypto support\n        if (window.crypto && window.crypto.getRandomValues) {\n            this.addDebugLog('‚úÖ Crypto API supported', 'success');\n        } else {\n            this.addDebugLog('‚ùå Crypto API not supported', 'error');\n        }\n        \n        // Check WebSocket support\n        if (window.WebSocket) {\n            this.addDebugLog('‚úÖ WebSocket supported', 'success');\n        } else {\n            this.addDebugLog('‚ùå WebSocket not supported', 'error');\n        }\n        \n        this.addDebugLog('Diagnostics complete', 'info');\n    }\n    \n    // Escape HTML to prevent XSS\n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n    \n    // Get current UI state\n    getState() {\n        return {\n            isInitialized: this.isInitialized,\n            connectionStatus: this.connectionStatus,\n            currentRoom: this.currentRoom,\n            theme: this.currentTheme\n        };\n    }\n    \n    // Destroy UI manager\n    destroy() {\n        this.eventHandlers.clear();\n        this.elements = {};\n        this.isInitialized = false;\n        console.log('üóëÔ∏è UI manager destroyed');\n    }\n}"],"names":["exports","constructor","this","isInitialized","identityKeys","ephemeralKeys","sessionKey","peerPublicKey","currentCipher","supportedCiphers","keyLength","nonceLength","encrypt","encryptChaCha20Poly1305","bind","decrypt","decryptChaCha20Poly1305","aes","encryptAES256GCM","decryptAES256GCM","metrics","encryptionTime","decryptionTime","keyGenerationTime","initialize","console","log","startTime","performance","now","sodium","ready","crypto_sign_keypair","crypto_box_keypair","toFixed","error","Error","message","setCipher","cipherName","performKeyExchange","peerKey","from_hex","sharedSecret","crypto_box_beforenm","privateKey","crypto_kdf_derive_from_key","to_hex","publicKey","encryptMessage","plaintext","cipher","result","ciphertext","to_base64","nonce","timestamp","Date","decryptMessage","encryptedData","from_base64","text","to_string","randombytes_buf","from_string","crypto_secretbox_easy","crypto_secretbox_open_easy","crypto_aead_aes256gcm_encrypt","crypto_aead_aes256gcm_decrypt","generateNonce","length","generateRoomId","toUpperCase","getPublicKey","getIdentityPublicKey","signData","data","crypto_sign_detached","verifySignature","signature","sigBytes","pubKey","crypto_sign_verify_detached","getMetrics","destroy","memzero","securityManager","eventHandlers","Map","messageQueue","pendingMessages","messageCounter","deliveryTimeout","retryAttempts","messagesSent","messagesReceived","averageEncryptionTime","averageDecryptionTime","on","event","handler","has","set","get","push","emit","handlers","forEach","options","messageId","generateMessageId","messagePayload","id","type","metadata","encryptedMessage","payload","JSON","stringify","requiresAck","updateEncryptionMetrics","trackMessageDelivery","decryptedPayload","messageContent","parse","sendAcknowledgment","updateDecryptionMetrics","decryptedMessage","decrypted","handleAcknowledgment","handlePing","warn","sendErrorAcknowledgment","Math","random","toString","substr","deliveryInfo","sentAt","attempts","maxAttempts","setTimeout","handleDeliveryTimeout","ackMessage","status","errorMessage","errorAck","delete","deliveryTime","pingMessage","pongMessage","originalTimestamp","getPendingMessagesCount","size","clearPendingMessages","clear","configuration","initiator","trickle","peer","isConnected","isConnecting","connectionState","reconnectAttempts","maxReconnectAttempts","reconnectDelay","connectionTimeout","healthCheckInterval","signalingSocket","currentRoom","stats","connectTime","packetsLost","roundTripTime","dataChannelState","connect","roomId","isInitiator","connectToSignalingServer","joinRoom","initializePeer","handleConnectionTimeout","Peer","config","signal","sendSignal","clearTimeout","startHealthCheck","handleDisconnection","shouldAttemptReconnect","scheduleReconnect","Promise","resolve","reject","protocol","window","location","wsUrl","host","WebSocket","onopen","onmessage","handleSignalingMessage","onclose","onerror","readyState","OPEN","joinMessage","room","send","timeout","originalHandler","sendData","jsonData","setInterval","updateConnectionStats","sendPing","_pc","getStats","then","report","state","currentRoundTripTime","catch","clearInterval","includes","code","delay","min","pow","disconnect","close","getState","elements","currentTheme","connectionStatus","cacheElements","setupEventListeners","initializeUIState","setupResponsiveDesign","modeSelection","document","getElementById","hostNodeBtn","joinNetworkBtn","connectionPanel","roomInput","generateRoomBtn","cipherSelect","connectBtn","disconnectBtn","chatPanel","messagesContainer","messageInput","sendBtn","debugLogs","clearLogsBtn","runDebugBtn","userIdDisplay","peerStatus","requiredElements","elementId","addEventListener","value","trim","showError","sendMessage","e","key","shiftKey","preventDefault","autoResizeTextarea","clearDebugLogs","runDebugDiagnostics","setupAdvancedFeatureButtons","fileBtn","querySelector","voiceBtn","updateConnectionStatus","generateRandomRoomId","focus","handleViewportChange","isMobile","innerWidth","body","classList","toggle","messageText","textContent","getStatusText","className","disabled","disconnected","connecting","connected","displayMessage","messageElement","createMessageElement","appendChild","scrollToBottom","removeEncryptionNotice","messageDiv","createElement","sender","toLocaleTimeString","innerHTML","escapeHtml","encrypted","notice","remove","scrollTop","scrollHeight","errorDiv","parentElement","showSuccess","successDiv","Array","from","crypto","getRandomValues","Uint8Array","map","b","padStart","join","textarea","style","height","addDebugLog","logEntry","RTCPeerConnection","div","theme"],"mappings":"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"}