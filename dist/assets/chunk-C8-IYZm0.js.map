{"version":3,"file":"chunk-C8-IYZm0.js","sources":["../../src/managers/security-manager.js","../../src/managers/message-manager.js","../../src/managers/connection-manager.js","../../src/managers/ui-manager.js"],"sourcesContent":["// CipherWave Security Manager - Optimized with single crypto library\n// Uses only libsodium-wrappers for better performance and smaller bundle size\n\nimport sodium from 'libsodium-wrappers';\n\nexport class SecurityManager {\n    constructor() {\n        this.isInitialized = false;\n        this.identityKeys = null;\n        this.ephemeralKeys = null;\n        this.sessionKey = null;\n        this.peerPublicKey = null;\n        this.currentCipher = 'chacha20-poly1305';\n        \n        // Supported ciphers (all using libsodium)\n        this.supportedCiphers = {\n            'chacha20-poly1305': {\n                keyLength: 32,\n                nonceLength: 12,\n                encrypt: this.encryptChaCha20Poly1305.bind(this),\n                decrypt: this.decryptChaCha20Poly1305.bind(this)\n            },\n            'aes': {\n                keyLength: 32,\n                nonceLength: 12,\n                encrypt: this.encryptAES256GCM.bind(this),\n                decrypt: this.decryptAES256GCM.bind(this)\n            }\n        };\n        \n        // Performance metrics\n        this.metrics = {\n            encryptionTime: 0,\n            decryptionTime: 0,\n            keyGenerationTime: 0\n        };\n    }\n    \n    async initialize() {\n        console.log('üîê Initializing security manager with libsodium...');\n        const startTime = performance.now();\n        \n        try {\n            // Wait for libsodium to be ready\n            await sodium.ready;\n            \n            // Generate identity keys (Ed25519 for signing)\n            this.identityKeys = sodium.crypto_sign_keypair();\n            \n            // Generate ephemeral keys (X25519 for key exchange)\n            this.ephemeralKeys = sodium.crypto_box_keypair();\n            \n            this.isInitialized = true;\n            \n            this.metrics.keyGenerationTime = performance.now() - startTime;\n            console.log(`‚úÖ Security manager initialized (${this.metrics.keyGenerationTime.toFixed(2)}ms)`);\n            \n        } catch (error) {\n            console.error('‚ùå Failed to initialize security manager:', error);\n            throw new Error(`Security initialization failed: ${error.message}`);\n        }\n    }\n    \n    async setCipher(cipherName) {\n        if (!this.supportedCiphers[cipherName]) {\n            throw new Error(`Unsupported cipher: ${cipherName}`);\n        }\n        \n        this.currentCipher = cipherName;\n        console.log(`üîí Switched to cipher: ${cipherName}`);\n    }\n    \n    // Key exchange using X25519\n    async performKeyExchange(peerPublicKey) {\n        if (!this.isInitialized) {\n            throw new Error('Security manager not initialized');\n        }\n        \n        try {\n            // Convert peer public key if it's a string\n            const peerKey = typeof peerPublicKey === 'string' \n                ? sodium.from_hex(peerPublicKey)\n                : peerPublicKey;\n            \n            // Perform ECDH key exchange\n            const sharedSecret = sodium.crypto_box_beforenm(\n                peerKey,\n                this.ephemeralKeys.privateKey\n            );\n            \n            // Derive session key using HKDF\n            this.sessionKey = sodium.crypto_kdf_derive_from_key(\n                32, // 256-bit key\n                1,  // subkey ID\n                'CipherWv', // context (8 bytes)\n                sharedSecret\n            );\n            \n            this.peerPublicKey = peerKey;\n            \n            console.log('ü§ù Key exchange completed');\n            return sodium.to_hex(this.ephemeralKeys.publicKey);\n            \n        } catch (error) {\n            console.error('Key exchange failed:', error);\n            throw new Error(`Key exchange failed: ${error.message}`);\n        }\n    }\n    \n    // Encrypt message using current cipher\n    async encryptMessage(plaintext) {\n        if (!this.sessionKey) {\n            throw new Error('No session key available');\n        }\n        \n        const startTime = performance.now();\n        \n        try {\n            const cipher = this.supportedCiphers[this.currentCipher];\n            const result = await cipher.encrypt(plaintext);\n            \n            this.metrics.encryptionTime = performance.now() - startTime;\n            \n            return {\n                ciphertext: sodium.to_base64(result.ciphertext),\n                nonce: sodium.to_base64(result.nonce),\n                cipher: this.currentCipher,\n                timestamp: Date.now()\n            };\n            \n        } catch (error) {\n            console.error('Encryption failed:', error);\n            throw new Error(`Encryption failed: ${error.message}`);\n        }\n    }\n    \n    // Decrypt message\n    async decryptMessage(encryptedData) {\n        if (!this.sessionKey) {\n            throw new Error('No session key available');\n        }\n        \n        const startTime = performance.now();\n        \n        try {\n            const cipher = this.supportedCiphers[encryptedData.cipher];\n            if (!cipher) {\n                throw new Error(`Unsupported cipher: ${encryptedData.cipher}`);\n            }\n            \n            const ciphertext = sodium.from_base64(encryptedData.ciphertext);\n            const nonce = sodium.from_base64(encryptedData.nonce);\n            \n            const plaintext = await cipher.decrypt(ciphertext, nonce);\n            \n            this.metrics.decryptionTime = performance.now() - startTime;\n            \n            return {\n                text: sodium.to_string(plaintext),\n                timestamp: encryptedData.timestamp,\n                cipher: encryptedData.cipher\n            };\n            \n        } catch (error) {\n            console.error('Decryption failed:', error);\n            throw new Error(`Decryption failed: ${error.message}`);\n        }\n    }\n    \n    // ChaCha20-Poly1305 encryption (recommended)\n    async encryptChaCha20Poly1305(plaintext) {\n        const nonce = sodium.randombytes_buf(12); // 96-bit nonce\n        const message = sodium.from_string(plaintext);\n        \n        const ciphertext = sodium.crypto_secretbox_easy(\n            message,\n            nonce,\n            this.sessionKey\n        );\n        \n        return { ciphertext, nonce };\n    }\n    \n    async decryptChaCha20Poly1305(ciphertext, nonce) {\n        return sodium.crypto_secretbox_open_easy(\n            ciphertext,\n            nonce,\n            this.sessionKey\n        );\n    }\n    \n    // AES-256-GCM encryption (fallback)\n    async encryptAES256GCM(plaintext) {\n        const nonce = sodium.randombytes_buf(12); // 96-bit nonce\n        const message = sodium.from_string(plaintext);\n        \n        const ciphertext = sodium.crypto_aead_aes256gcm_encrypt(\n            message,\n            null, // no additional data\n            null, // no secret nonce\n            nonce,\n            this.sessionKey\n        );\n        \n        return { ciphertext, nonce };\n    }\n    \n    async decryptAES256GCM(ciphertext, nonce) {\n        return sodium.crypto_aead_aes256gcm_decrypt(\n            null, // no secret nonce\n            ciphertext,\n            null, // no additional data\n            nonce,\n            this.sessionKey\n        );\n    }\n    \n    // Utility methods\n    generateNonce(length = 12) {\n        return sodium.randombytes_buf(length);\n    }\n    \n    generateRoomId() {\n        return sodium.to_hex(sodium.randombytes_buf(16)).toUpperCase();\n    }\n    \n    getPublicKey() {\n        if (!this.ephemeralKeys) {\n            throw new Error('Keys not generated');\n        }\n        return sodium.to_hex(this.ephemeralKeys.publicKey);\n    }\n    \n    getIdentityPublicKey() {\n        if (!this.identityKeys) {\n            throw new Error('Identity keys not generated');\n        }\n        return sodium.to_hex(this.identityKeys.publicKey);\n    }\n    \n    // Sign data with identity key\n    signData(data) {\n        if (!this.identityKeys) {\n            throw new Error('Identity keys not available');\n        }\n        \n        const message = typeof data === 'string' ? sodium.from_string(data) : data;\n        return sodium.crypto_sign_detached(message, this.identityKeys.privateKey);\n    }\n    \n    // Verify signature\n    verifySignature(data, signature, publicKey) {\n        const message = typeof data === 'string' ? sodium.from_string(data) : data;\n        const sigBytes = typeof signature === 'string' ? sodium.from_hex(signature) : signature;\n        const pubKey = typeof publicKey === 'string' ? sodium.from_hex(publicKey) : publicKey;\n        \n        return sodium.crypto_sign_verify_detached(sigBytes, message, pubKey);\n    }\n    \n    // Get performance metrics\n    getMetrics() {\n        return { ...this.metrics };\n    }\n    \n    // Clear sensitive data\n    destroy() {\n        if (this.sessionKey) {\n            sodium.memzero(this.sessionKey);\n            this.sessionKey = null;\n        }\n        \n        if (this.ephemeralKeys) {\n            sodium.memzero(this.ephemeralKeys.privateKey);\n            this.ephemeralKeys = null;\n        }\n        \n        if (this.identityKeys) {\n            sodium.memzero(this.identityKeys.privateKey);\n            this.identityKeys = null;\n        }\n        \n        this.peerPublicKey = null;\n        this.isInitialized = false;\n        \n        console.log('üóëÔ∏è Security manager destroyed');\n    }\n}","// CipherWave Message Manager - Optimized for code splitting\n// Handles secure message encryption/decryption and delivery\n\nexport class MessageManager {\n    constructor(securityManager) {\n        this.securityManager = securityManager;\n        this.eventHandlers = new Map();\n        this.messageQueue = [];\n        this.pendingMessages = new Map();\n        this.messageCounter = 0;\n        \n        // Message delivery tracking\n        this.deliveryTimeout = 30000; // 30 seconds\n        this.retryAttempts = 3;\n        \n        // Performance metrics\n        this.metrics = {\n            messagesSent: 0,\n            messagesReceived: 0,\n            averageEncryptionTime: 0,\n            averageDecryptionTime: 0\n        };\n        \n        console.log('üí¨ Message manager initialized');\n    }\n    \n    // Event system\n    on(event, handler) {\n        if (!this.eventHandlers.has(event)) {\n            this.eventHandlers.set(event, []);\n        }\n        this.eventHandlers.get(event).push(handler);\n    }\n    \n    emit(event, data) {\n        const handlers = this.eventHandlers.get(event);\n        if (handlers) {\n            handlers.forEach(handler => {\n                try {\n                    handler(data);\n                } catch (error) {\n                    console.error(`Error in ${event} handler:`, error);\n                }\n            });\n        }\n    }\n    \n    // Encrypt a message for sending\n    async encryptMessage(plaintext, options = {}) {\n        if (!this.securityManager.isInitialized) {\n            throw new Error('Security manager not initialized');\n        }\n        \n        const startTime = performance.now();\n        \n        try {\n            // Create message metadata\n            const messageId = this.generateMessageId();\n            const timestamp = Date.now();\n            \n            // Prepare message payload\n            const messagePayload = {\n                id: messageId,\n                text: plaintext,\n                timestamp: timestamp,\n                type: options.type || 'text',\n                metadata: options.metadata || {}\n            };\n            \n            // Encrypt the message\n            const encryptedPayload = await this.securityManager.encryptMessage(\n                JSON.stringify(messagePayload)\n            );\n            \n            // Create final message structure\n            const encryptedMessage = {\n                id: messageId,\n                type: 'encrypted_message',\n                payload: encryptedPayload,\n                timestamp: timestamp,\n                requiresAck: options.requiresAck !== false // Default to true\n            };\n            \n            // Track encryption time\n            const encryptionTime = performance.now() - startTime;\n            this.updateEncryptionMetrics(encryptionTime);\n            \n            // Store for delivery tracking if acknowledgment required\n            if (encryptedMessage.requiresAck) {\n                this.trackMessageDelivery(messageId, encryptedMessage);\n            }\n            \n            this.metrics.messagesSent++;\n            \n            console.log(`üîí Message encrypted (${encryptionTime.toFixed(2)}ms)`);\n            return encryptedMessage;\n            \n        } catch (error) {\n            console.error('Message encryption failed:', error);\n            throw new Error(`Failed to encrypt message: ${error.message}`);\n        }\n    }\n    \n    // Decrypt a received message\n    async decryptMessage(encryptedMessage) {\n        if (!this.securityManager.isInitialized) {\n            throw new Error('Security manager not initialized');\n        }\n        \n        const startTime = performance.now();\n        \n        try {\n            // Handle different message types\n            if (encryptedMessage.type === 'encrypted_message') {\n                // Decrypt the payload\n                const decryptedPayload = await this.securityManager.decryptMessage(\n                    encryptedMessage.payload\n                );\n                \n                // Parse the message content\n                const messageContent = JSON.parse(decryptedPayload.text);\n                \n                // Send acknowledgment if required\n                if (encryptedMessage.requiresAck) {\n                    this.sendAcknowledgment(encryptedMessage.id);\n                }\n                \n                // Track decryption time\n                const decryptionTime = performance.now() - startTime;\n                this.updateDecryptionMetrics(decryptionTime);\n                \n                this.metrics.messagesReceived++;\n                \n                // Emit decrypted message event\n                const decryptedMessage = {\n                    id: messageContent.id,\n                    text: messageContent.text,\n                    timestamp: messageContent.timestamp,\n                    type: messageContent.type,\n                    metadata: messageContent.metadata || {},\n                    decrypted: true,\n                    decryptionTime: decryptionTime\n                };\n                \n                this.emit('messageDecrypted', decryptedMessage);\n                \n                console.log(`üîì Message decrypted (${decryptionTime.toFixed(2)}ms)`);\n                return decryptedMessage;\n                \n            } else if (encryptedMessage.type === 'acknowledgment') {\n                // Handle message acknowledgment\n                this.handleAcknowledgment(encryptedMessage.messageId);\n                return null;\n                \n            } else if (encryptedMessage.type === 'ping') {\n                // Handle ping message\n                this.handlePing(encryptedMessage);\n                return null;\n                \n            } else {\n                console.warn('Unknown message type:', encryptedMessage.type);\n                return null;\n            }\n            \n        } catch (error) {\n            console.error('Message decryption failed:', error);\n            \n            // Send error acknowledgment\n            if (encryptedMessage.requiresAck) {\n                this.sendErrorAcknowledgment(encryptedMessage.id, error.message);\n            }\n            \n            throw new Error(`Failed to decrypt message: ${error.message}`);\n        }\n    }\n    \n    // Generate unique message ID\n    generateMessageId() {\n        this.messageCounter++;\n        return `msg_${Date.now()}_${this.messageCounter}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    // Track message delivery for acknowledgment\n    trackMessageDelivery(messageId, message) {\n        const deliveryInfo = {\n            message: message,\n            sentAt: Date.now(),\n            attempts: 0,\n            maxAttempts: this.retryAttempts\n        };\n        \n        this.pendingMessages.set(messageId, deliveryInfo);\n        \n        // Set delivery timeout\n        setTimeout(() => {\n            if (this.pendingMessages.has(messageId)) {\n                this.handleDeliveryTimeout(messageId);\n            }\n        }, this.deliveryTimeout);\n    }\n    \n    // Send acknowledgment for received message\n    sendAcknowledgment(messageId) {\n        const ackMessage = {\n            type: 'acknowledgment',\n            messageId: messageId,\n            timestamp: Date.now(),\n            status: 'delivered'\n        };\n        \n        this.emit('sendAcknowledgment', ackMessage);\n    }\n    \n    // Send error acknowledgment\n    sendErrorAcknowledgment(messageId, errorMessage) {\n        const errorAck = {\n            type: 'acknowledgment',\n            messageId: messageId,\n            timestamp: Date.now(),\n            status: 'error',\n            error: errorMessage\n        };\n        \n        this.emit('sendAcknowledgment', errorAck);\n    }\n    \n    // Handle received acknowledgment\n    handleAcknowledgment(messageId) {\n        if (this.pendingMessages.has(messageId)) {\n            const deliveryInfo = this.pendingMessages.get(messageId);\n            this.pendingMessages.delete(messageId);\n            \n            console.log(`‚úÖ Message ${messageId} delivered`);\n            this.emit('messageDelivered', {\n                messageId: messageId,\n                deliveryTime: Date.now() - deliveryInfo.sentAt\n            });\n        }\n    }\n    \n    // Handle delivery timeout\n    handleDeliveryTimeout(messageId) {\n        const deliveryInfo = this.pendingMessages.get(messageId);\n        \n        if (deliveryInfo) {\n            deliveryInfo.attempts++;\n            \n            if (deliveryInfo.attempts < deliveryInfo.maxAttempts) {\n                console.log(`üîÑ Retrying message ${messageId} (attempt ${deliveryInfo.attempts})`);\n                this.emit('retryMessage', deliveryInfo.message);\n                \n                // Reset timeout for next attempt\n                setTimeout(() => {\n                    if (this.pendingMessages.has(messageId)) {\n                        this.handleDeliveryTimeout(messageId);\n                    }\n                }, this.deliveryTimeout);\n                \n            } else {\n                console.error(`‚ùå Message ${messageId} delivery failed after ${deliveryInfo.attempts} attempts`);\n                this.pendingMessages.delete(messageId);\n                \n                this.emit('messageDeliveryFailed', {\n                    messageId: messageId,\n                    attempts: deliveryInfo.attempts,\n                    message: deliveryInfo.message\n                });\n            }\n        }\n    }\n    \n    // Handle ping message\n    handlePing(pingMessage) {\n        // Respond with pong\n        const pongMessage = {\n            type: 'pong',\n            originalTimestamp: pingMessage.timestamp,\n            timestamp: Date.now()\n        };\n        \n        this.emit('sendPong', pongMessage);\n    }\n    \n    // Update encryption metrics\n    updateEncryptionMetrics(encryptionTime) {\n        if (this.metrics.messagesSent === 0) {\n            this.metrics.averageEncryptionTime = encryptionTime;\n        } else {\n            this.metrics.averageEncryptionTime = \n                (this.metrics.averageEncryptionTime * (this.metrics.messagesSent - 1) + encryptionTime) / \n                this.metrics.messagesSent;\n        }\n    }\n    \n    // Update decryption metrics\n    updateDecryptionMetrics(decryptionTime) {\n        if (this.metrics.messagesReceived === 0) {\n            this.metrics.averageDecryptionTime = decryptionTime;\n        } else {\n            this.metrics.averageDecryptionTime = \n                (this.metrics.averageDecryptionTime * (this.metrics.messagesReceived - 1) + decryptionTime) / \n                this.metrics.messagesReceived;\n        }\n    }\n    \n    // Get pending messages count\n    getPendingMessagesCount() {\n        return this.pendingMessages.size;\n    }\n    \n    // Get message statistics\n    getMetrics() {\n        return {\n            ...this.metrics,\n            pendingMessages: this.getPendingMessagesCount()\n        };\n    }\n    \n    // Clear all pending messages\n    clearPendingMessages() {\n        this.pendingMessages.clear();\n        console.log('üóëÔ∏è Cleared all pending messages');\n    }\n    \n    // Destroy message manager\n    destroy() {\n        this.clearPendingMessages();\n        this.messageQueue = [];\n        this.eventHandlers.clear();\n        this.messageCounter = 0;\n        console.log('üóëÔ∏è Message manager destroyed');\n    }\n}","// CipherWave Connection Manager - Optimized for code splitting\n// Uses simple-peer for WebRTC with enhanced error handling\n\nimport Peer from 'simple-peer';\n\nexport class ConnectionManager {\n    constructor(configuration = {}) {\n        this.configuration = {\n            initiator: false,\n            trickle: true,\n            ...configuration\n        };\n        \n        this.peer = null;\n        this.isConnected = false;\n        this.isConnecting = false;\n        this.connectionState = 'new';\n        this.eventHandlers = new Map();\n        \n        // Connection management\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 5;\n        this.reconnectDelay = 1000;\n        this.connectionTimeout = null;\n        this.healthCheckInterval = null;\n        \n        // Signaling\n        this.signalingSocket = null;\n        this.currentRoom = null;\n        \n        // Performance tracking\n        this.stats = {\n            connectTime: 0,\n            packetsLost: 0,\n            roundTripTime: 0,\n            dataChannelState: 'connecting'\n        };\n        \n        console.log('üîó Connection manager initialized');\n    }\n    \n    // Event system\n    on(event, handler) {\n        if (!this.eventHandlers.has(event)) {\n            this.eventHandlers.set(event, []);\n        }\n        this.eventHandlers.get(event).push(handler);\n    }\n    \n    emit(event, data) {\n        const handlers = this.eventHandlers.get(event);\n        if (handlers) {\n            handlers.forEach(handler => {\n                try {\n                    handler(data);\n                } catch (error) {\n                    console.error(`Error in ${event} handler:`, error);\n                }\n            });\n        }\n    }\n    \n    // Connect to a room\n    async connect(roomId, isInitiator = false) {\n        if (this.isConnecting || this.isConnected) {\n            throw new Error('Connection already in progress or established');\n        }\n        \n        console.log(`üîó Connecting to room: ${roomId} (initiator: ${isInitiator})`);\n        const startTime = performance.now();\n        \n        try {\n            this.isConnecting = true;\n            this.currentRoom = roomId;\n            \n            // Connect to signaling server\n            await this.connectToSignalingServer();\n            \n            // Join room\n            await this.joinRoom(roomId);\n            \n            // Initialize WebRTC peer\n            await this.initializePeer(isInitiator);\n            \n            // Set connection timeout\n            this.connectionTimeout = setTimeout(() => {\n                if (!this.isConnected) {\n                    this.handleConnectionTimeout();\n                }\n            }, 30000); // 30 second timeout\n            \n            this.stats.connectTime = performance.now() - startTime;\n            \n        } catch (error) {\n            this.isConnecting = false;\n            console.error('Connection failed:', error);\n            this.emit('error', error);\n            throw error;\n        }\n    }\n    \n    // Initialize WebRTC peer connection\n    async initializePeer(isInitiator) {\n        this.peer = new Peer({\n            initiator: isInitiator,\n            trickle: true,\n            config: this.configuration\n        });\n        \n        // Set up peer event handlers\n        this.peer.on('signal', (signal) => {\n            console.log('üì° Sending signal:', signal.type);\n            this.sendSignal(signal);\n        });\n        \n        this.peer.on('connect', () => {\n            console.log('‚úÖ WebRTC connection established');\n            this.isConnected = true;\n            this.isConnecting = false;\n            this.connectionState = 'connected';\n            this.stats.dataChannelState = 'open';\n            \n            if (this.connectionTimeout) {\n                clearTimeout(this.connectionTimeout);\n                this.connectionTimeout = null;\n            }\n            \n            this.startHealthCheck();\n            this.emit('connected');\n        });\n        \n        this.peer.on('data', (data) => {\n            try {\n                const message = JSON.parse(data.toString());\n                this.emit('dataReceived', message);\n            } catch (error) {\n                console.error('Failed to parse received data:', error);\n            }\n        });\n        \n        this.peer.on('close', () => {\n            console.log('üîå WebRTC connection closed');\n            this.handleDisconnection();\n        });\n        \n        this.peer.on('error', (error) => {\n            console.error('WebRTC error:', error);\n            this.emit('error', error);\n            \n            // Attempt reconnection for certain errors\n            if (this.shouldAttemptReconnect(error)) {\n                this.scheduleReconnect();\n            }\n        });\n    }\n    \n    // Connect to signaling server\n    async connectToSignalingServer() {\n        return new Promise((resolve, reject) => {\n            try {\n                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n                const host = window.location.host;\n                const wsUrl = `${protocol}//${host}`;\n                \n                this.signalingSocket = new WebSocket(wsUrl);\n                \n                this.signalingSocket.onopen = () => {\n                    console.log('üì° Connected to signaling server');\n                    resolve();\n                };\n                \n                this.signalingSocket.onmessage = (event) => {\n                    this.handleSignalingMessage(JSON.parse(event.data));\n                };\n                \n                this.signalingSocket.onclose = () => {\n                    console.log('üì° Signaling server connection closed');\n                    if (this.isConnected) {\n                        this.scheduleReconnect();\n                    }\n                };\n                \n                this.signalingSocket.onerror = (error) => {\n                    console.error('Signaling server error:', error);\n                    reject(error);\n                };\n                \n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n    \n    // Join a room on the signaling server\n    async joinRoom(roomId) {\n        return new Promise((resolve, reject) => {\n            if (!this.signalingSocket || this.signalingSocket.readyState !== WebSocket.OPEN) {\n                reject(new Error('Signaling server not connected'));\n                return;\n            }\n            \n            const joinMessage = {\n                type: 'join',\n                room: roomId\n            };\n            \n            this.signalingSocket.send(JSON.stringify(joinMessage));\n            \n            // Wait for join confirmation\n            const timeout = setTimeout(() => {\n                reject(new Error('Room join timeout'));\n            }, 10000);\n            \n            const originalHandler = this.handleSignalingMessage.bind(this);\n            this.handleSignalingMessage = (message) => {\n                if (message.type === 'joined' && message.room === roomId) {\n                    clearTimeout(timeout);\n                    this.handleSignalingMessage = originalHandler;\n                    resolve();\n                } else if (message.type === 'error') {\n                    clearTimeout(timeout);\n                    this.handleSignalingMessage = originalHandler;\n                    reject(new Error(message.message));\n                } else {\n                    originalHandler(message);\n                }\n            };\n        });\n    }\n    \n    // Handle signaling messages\n    handleSignalingMessage(message) {\n        switch (message.type) {\n            case 'signal':\n                if (this.peer) {\n                    console.log('üì° Received signal:', message.signal.type);\n                    this.peer.signal(message.signal);\n                }\n                break;\n                \n            case 'peer-joined':\n                console.log('üëã Peer joined the room');\n                if (!this.peer && !this.isConnecting) {\n                    // Become the initiator if we're already in the room\n                    this.initializePeer(true);\n                }\n                break;\n                \n            case 'peer-left':\n                console.log('üëã Peer left the room');\n                this.handleDisconnection();\n                break;\n                \n            default:\n                console.log('Unknown signaling message:', message);\n        }\n    }\n    \n    // Send signaling data\n    sendSignal(signal) {\n        if (this.signalingSocket && this.signalingSocket.readyState === WebSocket.OPEN) {\n            const message = {\n                type: 'signal',\n                room: this.currentRoom,\n                signal: signal\n            };\n            this.signalingSocket.send(JSON.stringify(message));\n        }\n    }\n    \n    // Send data through WebRTC\n    async sendData(data) {\n        if (!this.isConnected || !this.peer) {\n            throw new Error('Not connected');\n        }\n        \n        try {\n            const jsonData = JSON.stringify(data);\n            this.peer.send(jsonData);\n        } catch (error) {\n            console.error('Failed to send data:', error);\n            throw error;\n        }\n    }\n    \n    // Start health check\n    startHealthCheck() {\n        this.healthCheckInterval = setInterval(() => {\n            if (this.isConnected && this.peer) {\n                // Update connection stats\n                this.updateConnectionStats();\n                \n                // Send ping if needed\n                this.sendPing();\n            }\n        }, 30000); // Check every 30 seconds\n    }\n    \n    // Update connection statistics\n    updateConnectionStats() {\n        if (this.peer && this.peer._pc) {\n            this.peer._pc.getStats().then(stats => {\n                stats.forEach(report => {\n                    if (report.type === 'candidate-pair' && report.state === 'succeeded') {\n                        this.stats.roundTripTime = report.currentRoundTripTime * 1000; // Convert to ms\n                    } else if (report.type === 'transport') {\n                        this.stats.packetsLost = report.packetsLost || 0;\n                    }\n                });\n            }).catch(error => {\n                console.warn('Failed to get connection stats:', error);\n            });\n        }\n    }\n    \n    // Send ping for connection health check\n    sendPing() {\n        try {\n            this.sendData({\n                type: 'ping',\n                timestamp: Date.now()\n            });\n        } catch (error) {\n            console.warn('Failed to send ping:', error);\n        }\n    }\n    \n    // Handle disconnection\n    handleDisconnection() {\n        this.isConnected = false;\n        this.isConnecting = false;\n        this.connectionState = 'disconnected';\n        this.stats.dataChannelState = 'closed';\n        \n        if (this.healthCheckInterval) {\n            clearInterval(this.healthCheckInterval);\n            this.healthCheckInterval = null;\n        }\n        \n        if (this.connectionTimeout) {\n            clearTimeout(this.connectionTimeout);\n            this.connectionTimeout = null;\n        }\n        \n        this.emit('disconnected');\n    }\n    \n    // Handle connection timeout\n    handleConnectionTimeout() {\n        console.error('‚è∞ Connection timeout');\n        this.handleDisconnection();\n        this.emit('error', new Error('Connection timeout'));\n    }\n    \n    // Determine if we should attempt reconnection\n    shouldAttemptReconnect(error) {\n        // Don't reconnect for certain error types\n        const nonRecoverableErrors = ['ERR_CONNECTION_REFUSED', 'ERR_NETWORK'];\n        return !nonRecoverableErrors.includes(error.code) && \n               this.reconnectAttempts < this.maxReconnectAttempts;\n    }\n    \n    // Schedule reconnection attempt\n    scheduleReconnect() {\n        if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n            console.error('‚ùå Max reconnection attempts reached');\n            this.emit('error', new Error('Max reconnection attempts reached'));\n            return;\n        }\n        \n        const delay = Math.min(this.reconnectDelay * Math.pow(2, this.reconnectAttempts), 30000);\n        this.reconnectAttempts++;\n        \n        console.log(`üîÑ Scheduling reconnect attempt ${this.reconnectAttempts} in ${delay}ms`);\n        \n        setTimeout(() => {\n            if (!this.isConnected && this.currentRoom) {\n                this.connect(this.currentRoom, false).catch(error => {\n                    console.error('Reconnection failed:', error);\n                    this.scheduleReconnect();\n                });\n            }\n        }, delay);\n    }\n    \n    // Disconnect\n    async disconnect() {\n        console.log('üîå Disconnecting...');\n        \n        this.isConnecting = false;\n        this.reconnectAttempts = 0;\n        \n        if (this.healthCheckInterval) {\n            clearInterval(this.healthCheckInterval);\n            this.healthCheckInterval = null;\n        }\n        \n        if (this.connectionTimeout) {\n            clearTimeout(this.connectionTimeout);\n            this.connectionTimeout = null;\n        }\n        \n        if (this.peer) {\n            this.peer.destroy();\n            this.peer = null;\n        }\n        \n        if (this.signalingSocket) {\n            this.signalingSocket.close();\n            this.signalingSocket = null;\n        }\n        \n        this.handleDisconnection();\n    }\n    \n    // Get connection statistics\n    getStats() {\n        return { ...this.stats };\n    }\n    \n    // Get connection state\n    getState() {\n        return {\n            isConnected: this.isConnected,\n            isConnecting: this.isConnecting,\n            connectionState: this.connectionState,\n            currentRoom: this.currentRoom,\n            reconnectAttempts: this.reconnectAttempts\n        };\n    }\n}","// CipherWave UI Manager - Lightweight core UI management\n// Heavy UI components (file-manager, voice-manager) are dynamically loaded\n\nexport class UIManager {\n    constructor() {\n        this.eventHandlers = new Map();\n        this.elements = {};\n        this.isInitialized = false;\n        this.currentTheme = 'dark';\n        \n        // UI state\n        this.connectionStatus = 'disconnected';\n        this.currentRoom = null;\n        \n        console.log('üé® UI manager initialized');\n    }\n    \n    // Event system\n    on(event, handler) {\n        if (!this.eventHandlers.has(event)) {\n            this.eventHandlers.set(event, []);\n        }\n        this.eventHandlers.get(event).push(handler);\n    }\n    \n    emit(event, data) {\n        const handlers = this.eventHandlers.get(event);\n        if (handlers) {\n            handlers.forEach(handler => {\n                try {\n                    handler(data);\n                } catch (error) {\n                    console.error(`Error in ${event} handler:`, error);\n                }\n            });\n        }\n    }\n    \n    // Initialize UI elements and event listeners\n    async initialize() {\n        console.log('üé® Initializing UI...');\n        \n        try {\n            // Cache DOM elements\n            this.cacheElements();\n            \n            // Set up event listeners\n            this.setupEventListeners();\n            \n            // Initialize UI state\n            this.initializeUIState();\n            \n            // Set up responsive design\n            this.setupResponsiveDesign();\n            \n            this.isInitialized = true;\n            console.log('‚úÖ UI initialized successfully');\n            \n        } catch (error) {\n            console.error('‚ùå Failed to initialize UI:', error);\n            throw error;\n        }\n    }\n    \n    // Cache frequently used DOM elements\n    cacheElements() {\n        this.elements = {\n            // Mode selection\n            modeSelection: document.getElementById('mode-selection'),\n            hostNodeBtn: document.getElementById('host-node-btn'),\n            joinNetworkBtn: document.getElementById('join-network-btn'),\n            \n            // Connection panel\n            connectionPanel: document.getElementById('connection-panel'),\n            roomInput: document.getElementById('room-id'),\n            generateRoomBtn: document.getElementById('generate-room'),\n            cipherSelect: document.getElementById('cipher-select'),\n            connectBtn: document.getElementById('connect-btn'),\n            disconnectBtn: document.getElementById('disconnect-btn'),\n            connectionStatus: document.getElementById('connection-status'),\n            \n            // Chat panel\n            chatPanel: document.getElementById('chat-panel'),\n            messagesContainer: document.getElementById('messages'),\n            messageInput: document.getElementById('message-input'),\n            sendBtn: document.getElementById('send-btn'),\n            \n            // Debug panel\n            debugLogs: document.getElementById('debug-logs'),\n            clearLogsBtn: document.getElementById('clear-logs-btn'),\n            runDebugBtn: document.getElementById('run-debug-btn'),\n            \n            // User info\n            userIdDisplay: document.getElementById('user-id-display'),\n            peerStatus: document.getElementById('peer-status')\n        };\n        \n        // Validate required elements\n        const requiredElements = ['connectBtn', 'disconnectBtn', 'messageInput', 'sendBtn'];\n        for (const elementId of requiredElements) {\n            if (!this.elements[elementId]) {\n                throw new Error(`Required UI element not found: ${elementId}`);\n            }\n        }\n    }\n    \n    // Set up event listeners for UI interactions\n    setupEventListeners() {\n        // Connection buttons\n        if (this.elements.connectBtn) {\n            this.elements.connectBtn.addEventListener('click', () => {\n                const roomId = this.elements.roomInput?.value.trim();\n                const cipher = this.elements.cipherSelect?.value || 'chacha20-poly1305';\n                \n                if (!roomId) {\n                    this.showError('Please enter a room ID');\n                    return;\n                }\n                \n                this.emit('connect', roomId, cipher);\n            });\n        }\n        \n        if (this.elements.disconnectBtn) {\n            this.elements.disconnectBtn.addEventListener('click', () => {\n                this.emit('disconnect');\n            });\n        }\n        \n        // Generate room ID\n        if (this.elements.generateRoomBtn) {\n            this.elements.generateRoomBtn.addEventListener('click', () => {\n                const roomId = this.generateRoomId();\n                if (this.elements.roomInput) {\n                    this.elements.roomInput.value = roomId;\n                }\n            });\n        }\n        \n        // Message sending\n        if (this.elements.sendBtn) {\n            this.elements.sendBtn.addEventListener('click', () => {\n                this.sendMessage();\n            });\n        }\n        \n        if (this.elements.messageInput) {\n            this.elements.messageInput.addEventListener('keypress', (e) => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                    e.preventDefault();\n                    this.sendMessage();\n                }\n            });\n            \n            // Auto-resize textarea\n            this.elements.messageInput.addEventListener('input', () => {\n                this.autoResizeTextarea(this.elements.messageInput);\n            });\n        }\n        \n        // Debug controls\n        if (this.elements.clearLogsBtn) {\n            this.elements.clearLogsBtn.addEventListener('click', () => {\n                this.clearDebugLogs();\n            });\n        }\n        \n        if (this.elements.runDebugBtn) {\n            this.elements.runDebugBtn.addEventListener('click', () => {\n                this.runDebugDiagnostics();\n            });\n        }\n        \n        // Advanced feature buttons (dynamically loaded)\n        this.setupAdvancedFeatureButtons();\n    }\n    \n    // Set up buttons for dynamically loaded features\n    setupAdvancedFeatureButtons() {\n        // File sharing button\n        const fileBtn = document.querySelector('[data-feature=\"file-sharing\"]');\n        if (fileBtn) {\n            fileBtn.addEventListener('click', () => {\n                this.emit('loadFileManager');\n            });\n        }\n        \n        // Voice message button\n        const voiceBtn = document.querySelector('[data-feature=\"voice-messages\"]');\n        if (voiceBtn) {\n            voiceBtn.addEventListener('click', () => {\n                this.emit('loadVoiceManager');\n            });\n        }\n    }\n    \n    // Initialize UI state\n    initializeUIState() {\n        this.updateConnectionStatus('disconnected');\n        this.generateRandomRoomId();\n        \n        // Set default cipher\n        if (this.elements.cipherSelect) {\n            this.elements.cipherSelect.value = 'chacha20-poly1305';\n        }\n        \n        // Focus room input\n        if (this.elements.roomInput) {\n            this.elements.roomInput.focus();\n        }\n    }\n    \n    // Set up responsive design handlers\n    setupResponsiveDesign() {\n        // Handle viewport changes\n        window.addEventListener('resize', () => {\n            this.handleViewportChange();\n        });\n        \n        // Handle orientation changes on mobile\n        window.addEventListener('orientationchange', () => {\n            setTimeout(() => this.handleViewportChange(), 100);\n        });\n        \n        // Initial viewport setup\n        this.handleViewportChange();\n    }\n    \n    // Handle viewport changes\n    handleViewportChange() {\n        const isMobile = window.innerWidth <= 768;\n        document.body.classList.toggle('mobile', isMobile);\n    }\n    \n    // Send message through the input field\n    sendMessage() {\n        const messageText = this.elements.messageInput?.value.trim();\n        \n        if (!messageText) {\n            return;\n        }\n        \n        if (messageText.length > 5000) {\n            this.showError('Message too long (max 5000 characters)');\n            return;\n        }\n        \n        this.emit('sendMessage', messageText);\n        \n        // Clear input\n        if (this.elements.messageInput) {\n            this.elements.messageInput.value = '';\n            this.autoResizeTextarea(this.elements.messageInput);\n        }\n    }\n    \n    // Update connection status display\n    updateConnectionStatus(status) {\n        this.connectionStatus = status;\n        \n        if (this.elements.connectionStatus) {\n            this.elements.connectionStatus.textContent = this.getStatusText(status);\n            this.elements.connectionStatus.className = `status status-${status}`;\n        }\n        \n        // Update button states\n        const isConnected = status === 'connected';\n        const isConnecting = status === 'connecting';\n        \n        if (this.elements.connectBtn) {\n            this.elements.connectBtn.disabled = isConnected || isConnecting;\n            this.elements.connectBtn.textContent = isConnecting ? 'Connecting...' : 'Connect';\n        }\n        \n        if (this.elements.disconnectBtn) {\n            this.elements.disconnectBtn.disabled = !isConnected && !isConnecting;\n        }\n        \n        if (this.elements.messageInput) {\n            this.elements.messageInput.disabled = !isConnected;\n        }\n        \n        if (this.elements.sendBtn) {\n            this.elements.sendBtn.disabled = !isConnected;\n        }\n        \n        // Show/hide chat panel\n        if (this.elements.chatPanel) {\n            this.elements.chatPanel.classList.toggle('hidden', !isConnected);\n        }\n    }\n    \n    // Get human-readable status text\n    getStatusText(status) {\n        const statusTexts = {\n            disconnected: 'Disconnected',\n            connecting: 'Connecting...',\n            connected: 'Connected',\n            error: 'Connection Error'\n        };\n        \n        return statusTexts[status] || status;\n    }\n    \n    // Display a message in the chat\n    displayMessage(message) {\n        if (!this.elements.messagesContainer) {\n            return;\n        }\n        \n        const messageElement = this.createMessageElement(message);\n        this.elements.messagesContainer.appendChild(messageElement);\n        \n        // Auto-scroll to bottom\n        this.scrollToBottom();\n        \n        // Remove encryption notice if this is the first message\n        this.removeEncryptionNotice();\n    }\n    \n    // Create message element\n    createMessageElement(message) {\n        const messageDiv = document.createElement('div');\n        messageDiv.className = `message ${message.sender === 'self' ? 'message-sent' : 'message-received'}`;\n        \n        const timestamp = new Date(message.timestamp).toLocaleTimeString();\n        \n        messageDiv.innerHTML = `\n            <div class=\"message-content\">\n                <div class=\"message-text\">${this.escapeHtml(message.text)}</div>\n                <div class=\"message-time\">${timestamp}</div>\n                ${message.encrypted ? '<div class=\"message-encrypted\"><i class=\"fas fa-lock\"></i></div>' : ''}\n            </div>\n        `;\n        \n        return messageDiv;\n    }\n    \n    // Remove encryption notice from empty chat\n    removeEncryptionNotice() {\n        const notice = this.elements.messagesContainer?.querySelector('.encryption-notice');\n        if (notice) {\n            notice.remove();\n        }\n    }\n    \n    // Scroll messages container to bottom\n    scrollToBottom() {\n        if (this.elements.messagesContainer) {\n            this.elements.messagesContainer.scrollTop = this.elements.messagesContainer.scrollHeight;\n        }\n    }\n    \n    // Show error message\n    showError(message) {\n        // Create error notification\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'error-notification';\n        errorDiv.innerHTML = `\n            <i class=\"fas fa-exclamation-triangle\"></i>\n            <span>${this.escapeHtml(message)}</span>\n            <button class=\"error-close\" onclick=\"this.parentElement.remove()\">√ó</button>\n        `;\n        \n        document.body.appendChild(errorDiv);\n        \n        // Auto-remove after 5 seconds\n        setTimeout(() => {\n            if (errorDiv.parentElement) {\n                errorDiv.remove();\n            }\n        }, 5000);\n    }\n    \n    // Show success message\n    showSuccess(message) {\n        // Create success notification\n        const successDiv = document.createElement('div');\n        successDiv.className = 'success-notification';\n        successDiv.innerHTML = `\n            <i class=\"fas fa-check-circle\"></i>\n            <span>${this.escapeHtml(message)}</span>\n            <button class=\"success-close\" onclick=\"this.parentElement.remove()\">√ó</button>\n        `;\n        \n        document.body.appendChild(successDiv);\n        \n        // Auto-remove after 3 seconds\n        setTimeout(() => {\n            if (successDiv.parentElement) {\n                successDiv.remove();\n            }\n        }, 3000);\n    }\n    \n    // Generate random room ID\n    generateRandomRoomId() {\n        const roomId = this.generateRoomId();\n        if (this.elements.roomInput) {\n            this.elements.roomInput.value = roomId;\n        }\n    }\n    \n    // Generate room ID\n    generateRoomId() {\n        return Array.from(crypto.getRandomValues(new Uint8Array(8)))\n            .map(b => b.toString(16).padStart(2, '0'))\n            .join('').toUpperCase();\n    }\n    \n    // Auto-resize textarea\n    autoResizeTextarea(textarea) {\n        textarea.style.height = 'auto';\n        textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';\n    }\n    \n    // Clear debug logs\n    clearDebugLogs() {\n        if (this.elements.debugLogs) {\n            this.elements.debugLogs.textContent = 'CipherWave Debug Console - Ready';\n        }\n    }\n    \n    // Add debug log entry\n    addDebugLog(message, type = 'info') {\n        if (!this.elements.debugLogs) {\n            return;\n        }\n        \n        const timestamp = new Date().toLocaleTimeString();\n        const logEntry = `[${timestamp}] ${type.toUpperCase()}: ${message}`;\n        \n        this.elements.debugLogs.textContent += '\\n' + logEntry;\n        this.elements.debugLogs.scrollTop = this.elements.debugLogs.scrollHeight;\n    }\n    \n    // Run debug diagnostics\n    runDebugDiagnostics() {\n        this.addDebugLog('Running diagnostics...', 'info');\n        \n        // Check WebRTC support\n        if (window.RTCPeerConnection) {\n            this.addDebugLog('‚úÖ WebRTC supported', 'success');\n        } else {\n            this.addDebugLog('‚ùå WebRTC not supported', 'error');\n        }\n        \n        // Check crypto support\n        if (window.crypto && window.crypto.getRandomValues) {\n            this.addDebugLog('‚úÖ Crypto API supported', 'success');\n        } else {\n            this.addDebugLog('‚ùå Crypto API not supported', 'error');\n        }\n        \n        // Check WebSocket support\n        if (window.WebSocket) {\n            this.addDebugLog('‚úÖ WebSocket supported', 'success');\n        } else {\n            this.addDebugLog('‚ùå WebSocket not supported', 'error');\n        }\n        \n        this.addDebugLog('Diagnostics complete', 'info');\n    }\n    \n    // Escape HTML to prevent XSS\n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n    \n    // Get current UI state\n    getState() {\n        return {\n            isInitialized: this.isInitialized,\n            connectionStatus: this.connectionStatus,\n            currentRoom: this.currentRoom,\n            theme: this.currentTheme\n        };\n    }\n    \n    // Destroy UI manager\n    destroy() {\n        this.eventHandlers.clear();\n        this.elements = {};\n        this.isInitialized = false;\n        console.log('üóëÔ∏è UI manager destroyed');\n    }\n}"],"names":["SecurityManager","constructor","this","isInitialized","identityKeys","ephemeralKeys","sessionKey","peerPublicKey","currentCipher","supportedCiphers","keyLength","nonceLength","encrypt","encryptChaCha20Poly1305","bind","decrypt","decryptChaCha20Poly1305","aes","encryptAES256GCM","decryptAES256GCM","metrics","encryptionTime","decryptionTime","keyGenerationTime","initialize","console","log","startTime","performance","now","sodium","ready","crypto_sign_keypair","crypto_box_keypair","concat","toFixed","error","Error","message","setCipher","cipherName","performKeyExchange","peerKey","from_hex","sharedSecret","crypto_box_beforenm","privateKey","crypto_kdf_derive_from_key","to_hex","publicKey","encryptMessage","plaintext","cipher","result","ciphertext","to_base64","nonce","timestamp","Date","decryptMessage","encryptedData","from_base64","text","to_string","randombytes_buf","from_string","crypto_secretbox_easy","crypto_secretbox_open_easy","crypto_aead_aes256gcm_encrypt","crypto_aead_aes256gcm_decrypt","generateNonce","length","generateRoomId","toUpperCase","getPublicKey","getIdentityPublicKey","signData","data","crypto_sign_detached","verifySignature","signature","sigBytes","pubKey","crypto_sign_verify_detached","getMetrics","destroy","memzero","MessageManager","securityManager","eventHandlers","Map","messageQueue","pendingMessages","messageCounter","deliveryTimeout","retryAttempts","messagesSent","messagesReceived","averageEncryptionTime","averageDecryptionTime","on","event","handler","has","set","get","push","emit","handlers","forEach","options","messageId","generateMessageId","messagePayload","id","type","metadata","encryptedMessage","payload","JSON","stringify","requiresAck","updateEncryptionMetrics","trackMessageDelivery","decryptedPayload","messageContent","parse","sendAcknowledgment","updateDecryptionMetrics","decryptedMessage","decrypted","handleAcknowledgment","handlePing","warn","sendErrorAcknowledgment","Math","random","toString","substr","deliveryInfo","sentAt","attempts","maxAttempts","setTimeout","handleDeliveryTimeout","ackMessage","status","errorMessage","errorAck","delete","deliveryTime","pingMessage","pongMessage","originalTimestamp","getPendingMessagesCount","size","clearPendingMessages","clear","ConnectionManager","configuration","initiator","trickle","peer","isConnected","isConnecting","connectionState","reconnectAttempts","maxReconnectAttempts","reconnectDelay","connectionTimeout","healthCheckInterval","signalingSocket","currentRoom","stats","connectTime","packetsLost","roundTripTime","dataChannelState","connect","roomId","isInitiator","connectToSignalingServer","joinRoom","initializePeer","handleConnectionTimeout","Peer","config","signal","sendSignal","clearTimeout","startHealthCheck","handleDisconnection","shouldAttemptReconnect","scheduleReconnect","Promise","resolve","reject","protocol","window","location","host","wsUrl","WebSocket","onopen","onmessage","handleSignalingMessage","onclose","onerror","readyState","OPEN","joinMessage","room","send","timeout","originalHandler","sendData","jsonData","setInterval","updateConnectionStats","sendPing","_pc","getStats","then","report","state","currentRoundTripTime","catch","clearInterval","includes","code","delay","min","pow","disconnect","close","getState","UIManager","elements","currentTheme","connectionStatus","cacheElements","setupEventListeners","initializeUIState","setupResponsiveDesign","modeSelection","document","getElementById","hostNodeBtn","joinNetworkBtn","connectionPanel","roomInput","generateRoomBtn","cipherSelect","connectBtn","disconnectBtn","chatPanel","messagesContainer","messageInput","sendBtn","debugLogs","clearLogsBtn","runDebugBtn","userIdDisplay","peerStatus","requiredElements","elementId","addEventListener","_a","value","trim","_b","showError","sendMessage","e","key","shiftKey","preventDefault","autoResizeTextarea","clearDebugLogs","runDebugDiagnostics","setupAdvancedFeatureButtons","fileBtn","querySelector","voiceBtn","updateConnectionStatus","generateRandomRoomId","focus","handleViewportChange","isMobile","innerWidth","body","classList","toggle","messageText","textContent","getStatusText","className","disabled","disconnected","connecting","connected","displayMessage","messageElement","createMessageElement","appendChild","scrollToBottom","removeEncryptionNotice","messageDiv","createElement","sender","toLocaleTimeString","innerHTML","escapeHtml","encrypted","notice","remove","scrollTop","scrollHeight","errorDiv","parentElement","showSuccess","successDiv","Array","from","crypto","getRandomValues","Uint8Array","map","b","padStart","join","textarea","style","height","addDebugLog","logEntry","RTCPeerConnection","div","theme"],"mappings":"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"}