{"version":3,"file":"chunk-BHpPQUns.js","sources":["../../src/managers/file-manager.js","../../src/managers/voice-manager.js"],"sourcesContent":["// CipherWave File Manager - Dynamically loaded for file sharing features\n// Only loaded when file sharing is needed to reduce initial bundle size\n\nexport class FileManager {\n    constructor() {\n        this.maxFileSize = 50 * 1024 * 1024; // 50MB\n        this.allowedTypes = {\n            images: ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml'],\n            videos: ['video/mp4', 'video/webm', 'video/ogg', 'video/mov', 'video/avi'],\n            audio: ['audio/mp3', 'audio/wav', 'audio/ogg', 'audio/webm', 'audio/m4a'],\n            documents: ['application/pdf', 'text/plain', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],\n            archives: ['application/zip', 'application/x-rar-compressed', 'application/x-7z-compressed']\n        };\n        \n        this.uploadQueue = [];\n        this.activeUploads = new Map();\n        this.compressionSettings = {\n            image: { quality: 0.8, maxWidth: 1920, maxHeight: 1080 },\n            video: { quality: 0.7, maxWidth: 1280, maxHeight: 720 }\n        };\n        \n        this.chunkSize = 64 * 1024; // 64KB chunks for large files\n        this.thumbnailSize = { width: 300, height: 200 };\n        \n        console.log('📁 File manager loaded');\n    }\n    \n    async setup() {\n        console.log('📁 Setting up file sharing system...');\n        \n        this.setupDragAndDrop();\n        this.setupFileInput();\n        this.setupClipboardPaste();\n        this.createFileUploadUI();\n    }\n    \n    setupDragAndDrop() {\n        const dropZone = document.body;\n        \n        dropZone.addEventListener('dragover', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            dropZone.classList.add('drag-over');\n        });\n        \n        dropZone.addEventListener('dragleave', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (!dropZone.contains(e.relatedTarget)) {\n                dropZone.classList.remove('drag-over');\n            }\n        });\n        \n        dropZone.addEventListener('drop', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            dropZone.classList.remove('drag-over');\n            \n            const files = Array.from(e.dataTransfer.files);\n            this.handleFileSelection(files);\n        });\n    }\n    \n    setupFileInput() {\n        // Create hidden file input\n        const fileInput = document.createElement('input');\n        fileInput.type = 'file';\n        fileInput.multiple = true;\n        fileInput.style.display = 'none';\n        fileInput.id = 'fileInput';\n        \n        fileInput.addEventListener('change', (e) => {\n            const files = Array.from(e.target.files);\n            this.handleFileSelection(files);\n        });\n        \n        document.body.appendChild(fileInput);\n        \n        // Add file share button if it doesn't exist\n        this.createFileShareButton();\n    }\n    \n    setupClipboardPaste() {\n        document.addEventListener('paste', (e) => {\n            const items = Array.from(e.clipboardData.items);\n            const files = items\n                .filter(item => item.kind === 'file')\n                .map(item => item.getAsFile());\n            \n            if (files.length > 0) {\n                e.preventDefault();\n                this.handleFileSelection(files);\n            }\n        });\n    }\n    \n    createFileShareButton() {\n        const chatPanel = document.getElementById('chat-panel');\n        if (!chatPanel || document.getElementById('fileShareBtn')) {\n            return;\n        }\n        \n        const messageInputGroup = chatPanel.querySelector('.message-input-group');\n        if (!messageInputGroup) {\n            return;\n        }\n        \n        const fileBtn = document.createElement('button');\n        fileBtn.id = 'fileShareBtn';\n        fileBtn.className = 'btn btn-secondary';\n        fileBtn.innerHTML = '<i class=\"fas fa-paperclip\"></i>';\n        fileBtn.title = 'Share file';\n        \n        fileBtn.addEventListener('click', () => {\n            document.getElementById('fileInput').click();\n        });\n        \n        messageInputGroup.insertBefore(fileBtn, messageInputGroup.lastElementChild);\n    }\n    \n    createFileUploadUI() {\n        // Add drag-drop overlay styles\n        if (!document.getElementById('fileManagerStyles')) {\n            const styles = document.createElement('style');\n            styles.id = 'fileManagerStyles';\n            styles.textContent = `\n                .drag-over::after {\n                    content: \"Drop files to send\";\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    width: 100%;\n                    height: 100%;\n                    background: rgba(0, 136, 204, 0.8);\n                    color: white;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    font-size: 2rem;\n                    z-index: 10000;\n                    pointer-events: none;\n                }\n                \n                .file-upload-progress {\n                    background: #1a1f29;\n                    border: 1px solid #2a3441;\n                    border-radius: 8px;\n                    padding: 15px;\n                    margin: 10px 0;\n                    max-width: 400px;\n                }\n                \n                .file-upload-info {\n                    display: flex;\n                    align-items: center;\n                    margin-bottom: 10px;\n                }\n                \n                .file-upload-icon {\n                    font-size: 2rem;\n                    margin-right: 15px;\n                    color: #0088cc;\n                }\n                \n                .file-upload-details h4 {\n                    margin: 0 0 5px 0;\n                    color: #ffffff;\n                }\n                \n                .file-upload-details p {\n                    margin: 0;\n                    color: #8899a6;\n                    font-size: 0.9rem;\n                }\n                \n                .file-upload-progress-bar {\n                    width: 100%;\n                    height: 6px;\n                    background: #2a3441;\n                    border-radius: 3px;\n                    overflow: hidden;\n                }\n                \n                .file-upload-progress-fill {\n                    height: 100%;\n                    background: #0088cc;\n                    transition: width 0.3s ease;\n                }\n                \n                .file-preview {\n                    max-width: 200px;\n                    max-height: 200px;\n                    border-radius: 8px;\n                    margin: 10px 0;\n                }\n            `;\n            document.head.appendChild(styles);\n        }\n    }\n    \n    async handleFileSelection(files) {\n        console.log(`📁 Processing ${files.length} file(s)`);\n        \n        for (const file of files) {\n            if (this.validateFile(file)) {\n                await this.processFile(file);\n            }\n        }\n    }\n    \n    validateFile(file) {\n        // Check file size\n        if (file.size > this.maxFileSize) {\n            this.showError(`File \"${file.name}\" is too large (max ${this.maxFileSize / 1024 / 1024}MB)`);\n            return false;\n        }\n        \n        // Check file type\n        const isAllowed = Object.values(this.allowedTypes)\n            .flat()\n            .some(type => file.type === type || file.type.startsWith(type.split('/')[0]));\n        \n        if (!isAllowed) {\n            this.showError(`File type \"${file.type}\" is not allowed`);\n            return false;\n        }\n        \n        return true;\n    }\n    \n    async processFile(file) {\n        const fileId = this.generateFileId();\n        const uploadInfo = {\n            id: fileId,\n            file: file,\n            status: 'processing',\n            progress: 0,\n            chunks: [],\n            thumbnail: null\n        };\n        \n        this.activeUploads.set(fileId, uploadInfo);\n        \n        try {\n            // Show upload progress UI\n            this.showUploadProgress(uploadInfo);\n            \n            // Generate thumbnail for images/videos\n            if (file.type.startsWith('image/') || file.type.startsWith('video/')) {\n                uploadInfo.thumbnail = await this.generateThumbnail(file);\n            }\n            \n            // Compress if needed\n            const processedFile = await this.compressFile(file);\n            \n            // Split into chunks\n            uploadInfo.chunks = await this.splitFileIntoChunks(processedFile);\n            uploadInfo.status = 'ready';\n            \n            // Send file metadata first\n            await this.sendFileMetadata(uploadInfo);\n            \n            // Send chunks\n            await this.sendFileChunks(uploadInfo);\n            \n            uploadInfo.status = 'completed';\n            this.updateUploadProgress(uploadInfo);\n            \n            console.log(`✅ File \"${file.name}\" sent successfully`);\n            \n        } catch (error) {\n            console.error(`❌ Failed to process file \"${file.name}\":`, error);\n            uploadInfo.status = 'error';\n            uploadInfo.error = error.message;\n            this.updateUploadProgress(uploadInfo);\n        }\n    }\n    \n    async generateThumbnail(file) {\n        return new Promise((resolve) => {\n            if (file.type.startsWith('image/')) {\n                const img = new Image();\n                img.onload = () => {\n                    const canvas = document.createElement('canvas');\n                    const ctx = canvas.getContext('2d');\n                    \n                    // Calculate dimensions\n                    const { width, height } = this.calculateThumbnailSize(img.width, img.height);\n                    canvas.width = width;\n                    canvas.height = height;\n                    \n                    // Draw thumbnail\n                    ctx.drawImage(img, 0, 0, width, height);\n                    \n                    resolve(canvas.toDataURL('image/jpeg', 0.8));\n                };\n                img.src = URL.createObjectURL(file);\n            } else {\n                resolve(null);\n            }\n        });\n    }\n    \n    calculateThumbnailSize(originalWidth, originalHeight) {\n        const { width: maxWidth, height: maxHeight } = this.thumbnailSize;\n        \n        const ratio = Math.min(maxWidth / originalWidth, maxHeight / originalHeight);\n        \n        return {\n            width: Math.round(originalWidth * ratio),\n            height: Math.round(originalHeight * ratio)\n        };\n    }\n    \n    async compressFile(file) {\n        // For now, return the original file\n        // Compression can be implemented later for specific file types\n        return file;\n    }\n    \n    async splitFileIntoChunks(file) {\n        const chunks = [];\n        const totalChunks = Math.ceil(file.size / this.chunkSize);\n        \n        for (let i = 0; i < totalChunks; i++) {\n            const start = i * this.chunkSize;\n            const end = Math.min(start + this.chunkSize, file.size);\n            const chunk = file.slice(start, end);\n            \n            chunks.push({\n                index: i,\n                data: await this.fileToBase64(chunk),\n                size: chunk.size\n            });\n        }\n        \n        return chunks;\n    }\n    \n    async fileToBase64(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result.split(',')[1]);\n            reader.onerror = reject;\n            reader.readAsDataURL(file);\n        });\n    }\n    \n    async sendFileMetadata(uploadInfo) {\n        const metadata = {\n            type: 'file_metadata',\n            fileId: uploadInfo.id,\n            name: uploadInfo.file.name,\n            size: uploadInfo.file.size,\n            type: uploadInfo.file.type,\n            chunks: uploadInfo.chunks.length,\n            thumbnail: uploadInfo.thumbnail,\n            timestamp: Date.now()\n        };\n        \n        // Emit to connection manager\n        if (window.cipherWave && window.cipherWave.connectionManager) {\n            await window.cipherWave.connectionManager.sendData(metadata);\n        }\n    }\n    \n    async sendFileChunks(uploadInfo) {\n        for (let i = 0; i < uploadInfo.chunks.length; i++) {\n            const chunk = uploadInfo.chunks[i];\n            \n            const chunkMessage = {\n                type: 'file_chunk',\n                fileId: uploadInfo.id,\n                chunkIndex: chunk.index,\n                data: chunk.data,\n                isLast: i === uploadInfo.chunks.length - 1\n            };\n            \n            // Send chunk\n            if (window.cipherWave && window.cipherWave.connectionManager) {\n                await window.cipherWave.connectionManager.sendData(chunkMessage);\n            }\n            \n            // Update progress\n            uploadInfo.progress = ((i + 1) / uploadInfo.chunks.length) * 100;\n            this.updateUploadProgress(uploadInfo);\n            \n            // Small delay to prevent overwhelming the connection\n            await new Promise(resolve => setTimeout(resolve, 10));\n        }\n    }\n    \n    showUploadProgress(uploadInfo) {\n        const messagesContainer = document.getElementById('messages');\n        if (!messagesContainer) return;\n        \n        const progressElement = document.createElement('div');\n        progressElement.className = 'file-upload-progress';\n        progressElement.id = `upload-${uploadInfo.id}`;\n        \n        progressElement.innerHTML = `\n            <div class=\"file-upload-info\">\n                <div class=\"file-upload-icon\">\n                    <i class=\"fas fa-file\"></i>\n                </div>\n                <div class=\"file-upload-details\">\n                    <h4>${uploadInfo.file.name}</h4>\n                    <p>${this.formatFileSize(uploadInfo.file.size)} • ${uploadInfo.file.type}</p>\n                </div>\n            </div>\n            <div class=\"file-upload-progress-bar\">\n                <div class=\"file-upload-progress-fill\" style=\"width: 0%\"></div>\n            </div>\n        `;\n        \n        messagesContainer.appendChild(progressElement);\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n    \n    updateUploadProgress(uploadInfo) {\n        const progressElement = document.getElementById(`upload-${uploadInfo.id}`);\n        if (!progressElement) return;\n        \n        const progressFill = progressElement.querySelector('.file-upload-progress-fill');\n        if (progressFill) {\n            progressFill.style.width = `${uploadInfo.progress}%`;\n        }\n        \n        if (uploadInfo.status === 'completed') {\n            setTimeout(() => {\n                if (progressElement.parentElement) {\n                    progressElement.remove();\n                }\n            }, 2000);\n        } else if (uploadInfo.status === 'error') {\n            progressElement.style.borderColor = '#ff6b6b';\n            const details = progressElement.querySelector('.file-upload-details p');\n            if (details) {\n                details.textContent = `Error: ${uploadInfo.error}`;\n                details.style.color = '#ff6b6b';\n            }\n        }\n    }\n    \n    generateFileId() {\n        return `file_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    formatFileSize(bytes) {\n        if (bytes === 0) return '0 Bytes';\n        \n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        \n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n    \n    showError(message) {\n        if (window.cipherWave && window.cipherWave.uiManager) {\n            window.cipherWave.uiManager.showError(message);\n        } else {\n            console.error(message);\n        }\n    }\n    \n    destroy() {\n        this.activeUploads.clear();\n        this.uploadQueue = [];\n        \n        // Remove file input\n        const fileInput = document.getElementById('fileInput');\n        if (fileInput) {\n            fileInput.remove();\n        }\n        \n        // Remove file share button\n        const fileBtn = document.getElementById('fileShareBtn');\n        if (fileBtn) {\n            fileBtn.remove();\n        }\n        \n        // Remove styles\n        const styles = document.getElementById('fileManagerStyles');\n        if (styles) {\n            styles.remove();\n        }\n        \n        console.log('🗑️ File manager destroyed');\n    }\n}","// CipherWave Voice Manager - Dynamically loaded for voice message features\n// Only loaded when voice messaging is needed to reduce initial bundle size\n\nexport class VoiceManager {\n    constructor() {\n        this.isRecording = false;\n        this.mediaRecorder = null;\n        this.audioContext = null;\n        this.analyser = null;\n        this.microphone = null;\n        this.recordedChunks = [];\n        this.recordingStartTime = null;\n        this.recordingDuration = 0;\n        this.maxRecordingTime = 300000; // 5 minutes\n        this.recordingTimer = null;\n        this.waveformCanvas = null;\n        this.waveformContext = null;\n        this.animationFrame = null;\n        this.supportedMimeTypes = ['audio/webm', 'audio/mp4', 'audio/wav'];\n        this.selectedMimeType = null;\n        this.voiceMessages = new Map();\n        \n        // Voice message UI elements\n        this.voiceButton = null;\n        this.recordingIndicator = null;\n        this.waveformContainer = null;\n        \n        // Playback states\n        this.currentlyPlaying = null;\n        this.isPlaying = false;\n        \n        // Permissions\n        this.microphoneAccess = false;\n        \n        // Compression settings\n        this.compressionOptions = {\n            mimeType: 'audio/webm;codecs=opus',\n            audioBitsPerSecond: 128000 // 128 kbps\n        };\n        \n        console.log('🎤 Voice manager loaded');\n    }\n    \n    async init() {\n        console.log('🎤 Initializing voice messaging system...');\n        \n        try {\n            await this.requestMicrophoneAccess();\n            this.detectSupportedMimeType();\n            this.createVoiceUI();\n            \n            console.log('✅ Voice manager initialized successfully');\n            \n        } catch (error) {\n            console.error('❌ Failed to initialize voice manager:', error);\n            throw error;\n        }\n    }\n    \n    async requestMicrophoneAccess() {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ \n                audio: {\n                    echoCancellation: true,\n                    noiseSuppression: true,\n                    autoGainControl: true\n                } \n            });\n            \n            this.microphoneAccess = true;\n            \n            // Stop the stream for now, we'll request it again when recording\n            stream.getTracks().forEach(track => track.stop());\n            \n            console.log('🎤 Microphone access granted');\n            \n        } catch (error) {\n            console.error('Microphone access denied:', error);\n            throw new Error('Microphone access is required for voice messages');\n        }\n    }\n    \n    detectSupportedMimeType() {\n        for (const mimeType of this.supportedMimeTypes) {\n            if (MediaRecorder.isTypeSupported(mimeType)) {\n                this.selectedMimeType = mimeType;\n                console.log(`🎤 Using audio format: ${mimeType}`);\n                break;\n            }\n        }\n        \n        if (!this.selectedMimeType) {\n            throw new Error('No supported audio format found');\n        }\n    }\n    \n    createVoiceUI() {\n        const chatPanel = document.getElementById('chat-panel');\n        if (!chatPanel || document.getElementById('voiceBtn')) {\n            return;\n        }\n        \n        const messageInputGroup = chatPanel.querySelector('.message-input-group');\n        if (!messageInputGroup) {\n            return;\n        }\n        \n        // Create voice button\n        this.voiceButton = document.createElement('button');\n        this.voiceButton.id = 'voiceBtn';\n        this.voiceButton.className = 'btn btn-secondary voice-btn';\n        this.voiceButton.innerHTML = '<i class=\"fas fa-microphone\"></i>';\n        this.voiceButton.title = 'Record voice message';\n        \n        // Add event listeners\n        this.voiceButton.addEventListener('mousedown', (e) => {\n            e.preventDefault();\n            this.startRecording();\n        });\n        \n        this.voiceButton.addEventListener('mouseup', (e) => {\n            e.preventDefault();\n            this.stopRecording();\n        });\n        \n        this.voiceButton.addEventListener('mouseleave', (e) => {\n            if (this.isRecording) {\n                this.stopRecording();\n            }\n        });\n        \n        // Touch events for mobile\n        this.voiceButton.addEventListener('touchstart', (e) => {\n            e.preventDefault();\n            this.startRecording();\n        });\n        \n        this.voiceButton.addEventListener('touchend', (e) => {\n            e.preventDefault();\n            this.stopRecording();\n        });\n        \n        messageInputGroup.insertBefore(this.voiceButton, messageInputGroup.lastElementChild);\n        \n        // Add voice UI styles\n        this.addVoiceStyles();\n    }\n    \n    addVoiceStyles() {\n        if (document.getElementById('voiceManagerStyles')) {\n            return;\n        }\n        \n        const styles = document.createElement('style');\n        styles.id = 'voiceManagerStyles';\n        styles.textContent = `\n            .voice-btn {\n                position: relative;\n                transition: all 0.3s ease;\n            }\n            \n            .voice-btn.recording {\n                background: #ff4757 !important;\n                animation: pulse 1s infinite;\n            }\n            \n            @keyframes pulse {\n                0% { transform: scale(1); }\n                50% { transform: scale(1.1); }\n                100% { transform: scale(1); }\n            }\n            \n            .voice-recording-overlay {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0, 0, 0, 0.8);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                z-index: 10000;\n                flex-direction: column;\n            }\n            \n            .voice-recording-content {\n                background: #1a1f29;\n                border-radius: 20px;\n                padding: 40px;\n                text-align: center;\n                border: 2px solid #ff4757;\n            }\n            \n            .voice-recording-icon {\n                font-size: 4rem;\n                color: #ff4757;\n                margin-bottom: 20px;\n                animation: pulse 1s infinite;\n            }\n            \n            .voice-recording-time {\n                font-size: 2rem;\n                color: #ffffff;\n                margin-bottom: 10px;\n                font-family: monospace;\n            }\n            \n            .voice-recording-instruction {\n                color: #8899a6;\n                font-size: 1.1rem;\n            }\n            \n            .voice-waveform {\n                width: 300px;\n                height: 60px;\n                margin: 20px auto;\n                background: #2a3441;\n                border-radius: 30px;\n            }\n            \n            .voice-message {\n                display: flex;\n                align-items: center;\n                background: #2a3441;\n                border-radius: 20px;\n                padding: 10px 15px;\n                margin: 5px 0;\n                max-width: 250px;\n            }\n            \n            .voice-message-play {\n                background: #0088cc;\n                border: none;\n                border-radius: 50%;\n                width: 40px;\n                height: 40px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: white;\n                cursor: pointer;\n                margin-right: 10px;\n            }\n            \n            .voice-message-duration {\n                color: #8899a6;\n                font-size: 0.9rem;\n                font-family: monospace;\n            }\n            \n            .voice-message-waveform {\n                flex: 1;\n                height: 30px;\n                margin: 0 10px;\n                background: #1a1f29;\n                border-radius: 15px;\n                position: relative;\n            }\n        `;\n        \n        document.head.appendChild(styles);\n    }\n    \n    async startRecording() {\n        if (this.isRecording || !this.microphoneAccess) {\n            return;\n        }\n        \n        console.log('🎤 Starting voice recording...');\n        \n        try {\n            // Get microphone stream\n            const stream = await navigator.mediaDevices.getUserMedia({ \n                audio: {\n                    echoCancellation: true,\n                    noiseSuppression: true,\n                    autoGainControl: true\n                } \n            });\n            \n            // Set up audio context for waveform\n            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n            this.analyser = this.audioContext.createAnalyser();\n            this.microphone = this.audioContext.createMediaStreamSource(stream);\n            this.microphone.connect(this.analyser);\n            \n            this.analyser.fftSize = 256;\n            \n            // Set up media recorder\n            this.mediaRecorder = new MediaRecorder(stream, {\n                mimeType: this.selectedMimeType,\n                audioBitsPerSecond: this.compressionOptions.audioBitsPerSecond\n            });\n            \n            this.recordedChunks = [];\n            \n            this.mediaRecorder.ondataavailable = (event) => {\n                if (event.data.size > 0) {\n                    this.recordedChunks.push(event.data);\n                }\n            };\n            \n            this.mediaRecorder.onstop = () => {\n                this.processRecordedAudio();\n            };\n            \n            // Start recording\n            this.mediaRecorder.start();\n            this.isRecording = true;\n            this.recordingStartTime = Date.now();\n            \n            // Update UI\n            this.showRecordingUI();\n            this.voiceButton.classList.add('recording');\n            \n            // Start waveform animation\n            this.startWaveformAnimation();\n            \n            // Start timer\n            this.startRecordingTimer();\n            \n        } catch (error) {\n            console.error('Failed to start recording:', error);\n            this.showError('Failed to start voice recording');\n        }\n    }\n    \n    stopRecording() {\n        if (!this.isRecording) {\n            return;\n        }\n        \n        console.log('🎤 Stopping voice recording...');\n        \n        this.isRecording = false;\n        this.recordingDuration = Date.now() - this.recordingStartTime;\n        \n        // Stop media recorder\n        if (this.mediaRecorder && this.mediaRecorder.state === 'recording') {\n            this.mediaRecorder.stop();\n        }\n        \n        // Stop microphone stream\n        if (this.microphone && this.microphone.stream) {\n            this.microphone.stream.getTracks().forEach(track => track.stop());\n        }\n        \n        // Clean up audio context\n        if (this.audioContext) {\n            this.audioContext.close();\n            this.audioContext = null;\n        }\n        \n        // Update UI\n        this.hideRecordingUI();\n        this.voiceButton.classList.remove('recording');\n        \n        // Stop waveform animation\n        this.stopWaveformAnimation();\n        \n        // Stop timer\n        this.stopRecordingTimer();\n    }\n    \n    showRecordingUI() {\n        if (document.getElementById('voiceRecordingOverlay')) {\n            return;\n        }\n        \n        const overlay = document.createElement('div');\n        overlay.id = 'voiceRecordingOverlay';\n        overlay.className = 'voice-recording-overlay';\n        \n        overlay.innerHTML = `\n            <div class=\"voice-recording-content\">\n                <div class=\"voice-recording-icon\">\n                    <i class=\"fas fa-microphone\"></i>\n                </div>\n                <div class=\"voice-recording-time\" id=\"recordingTime\">0:00</div>\n                <canvas class=\"voice-waveform\" id=\"recordingWaveform\" width=\"300\" height=\"60\"></canvas>\n                <div class=\"voice-recording-instruction\">Hold to record, release to send</div>\n            </div>\n        `;\n        \n        document.body.appendChild(overlay);\n        \n        // Set up waveform canvas\n        this.waveformCanvas = document.getElementById('recordingWaveform');\n        this.waveformContext = this.waveformCanvas.getContext('2d');\n    }\n    \n    hideRecordingUI() {\n        const overlay = document.getElementById('voiceRecordingOverlay');\n        if (overlay) {\n            overlay.remove();\n        }\n        \n        this.waveformCanvas = null;\n        this.waveformContext = null;\n    }\n    \n    startWaveformAnimation() {\n        if (!this.analyser || !this.waveformContext) {\n            return;\n        }\n        \n        const bufferLength = this.analyser.frequencyBinCount;\n        const dataArray = new Uint8Array(bufferLength);\n        \n        const draw = () => {\n            if (!this.isRecording) {\n                return;\n            }\n            \n            this.animationFrame = requestAnimationFrame(draw);\n            \n            this.analyser.getByteFrequencyData(dataArray);\n            \n            this.waveformContext.fillStyle = '#2a3441';\n            this.waveformContext.fillRect(0, 0, this.waveformCanvas.width, this.waveformCanvas.height);\n            \n            const barWidth = (this.waveformCanvas.width / bufferLength) * 2.5;\n            let barHeight;\n            let x = 0;\n            \n            for (let i = 0; i < bufferLength; i++) {\n                barHeight = (dataArray[i] / 255.0) * this.waveformCanvas.height * 0.8;\n                \n                this.waveformContext.fillStyle = `rgb(0, 136, 204)`;\n                this.waveformContext.fillRect(\n                    x, \n                    this.waveformCanvas.height - barHeight, \n                    barWidth, \n                    barHeight\n                );\n                \n                x += barWidth + 1;\n            }\n        };\n        \n        draw();\n    }\n    \n    stopWaveformAnimation() {\n        if (this.animationFrame) {\n            cancelAnimationFrame(this.animationFrame);\n            this.animationFrame = null;\n        }\n    }\n    \n    startRecordingTimer() {\n        this.recordingTimer = setInterval(() => {\n            const elapsed = Date.now() - this.recordingStartTime;\n            const minutes = Math.floor(elapsed / 60000);\n            const seconds = Math.floor((elapsed % 60000) / 1000);\n            \n            const timeElement = document.getElementById('recordingTime');\n            if (timeElement) {\n                timeElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n            }\n            \n            // Auto-stop at max recording time\n            if (elapsed >= this.maxRecordingTime) {\n                this.stopRecording();\n            }\n        }, 100);\n    }\n    \n    stopRecordingTimer() {\n        if (this.recordingTimer) {\n            clearInterval(this.recordingTimer);\n            this.recordingTimer = null;\n        }\n    }\n    \n    async processRecordedAudio() {\n        if (this.recordedChunks.length === 0) {\n            console.warn('No audio data recorded');\n            return;\n        }\n        \n        // Check minimum duration\n        if (this.recordingDuration < 500) {\n            console.warn('Recording too short, discarding');\n            return;\n        }\n        \n        console.log(`🎤 Processing ${this.recordingDuration}ms of audio...`);\n        \n        try {\n            // Create blob from recorded chunks\n            const audioBlob = new Blob(this.recordedChunks, { \n                type: this.selectedMimeType \n            });\n            \n            // Convert to base64 for transmission\n            const audioData = await this.blobToBase64(audioBlob);\n            \n            // Create voice message\n            const voiceMessage = {\n                type: 'voice_message',\n                id: this.generateVoiceMessageId(),\n                data: audioData,\n                duration: this.recordingDuration,\n                mimeType: this.selectedMimeType,\n                timestamp: Date.now()\n            };\n            \n            // Send voice message\n            await this.sendVoiceMessage(voiceMessage);\n            \n            // Display in chat\n            this.displayVoiceMessage(voiceMessage, 'self');\n            \n        } catch (error) {\n            console.error('Failed to process recorded audio:', error);\n            this.showError('Failed to process voice message');\n        }\n    }\n    \n    async blobToBase64(blob) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result.split(',')[1]);\n            reader.onerror = reject;\n            reader.readAsDataURL(blob);\n        });\n    }\n    \n    async sendVoiceMessage(voiceMessage) {\n        if (window.cipherWave && window.cipherWave.connectionManager) {\n            await window.cipherWave.connectionManager.sendData(voiceMessage);\n            console.log('🎤 Voice message sent');\n        }\n    }\n    \n    displayVoiceMessage(voiceMessage, sender) {\n        const messagesContainer = document.getElementById('messages');\n        if (!messagesContainer) {\n            return;\n        }\n        \n        const messageElement = document.createElement('div');\n        messageElement.className = `message ${sender === 'self' ? 'message-sent' : 'message-received'}`;\n        \n        const duration = this.formatDuration(voiceMessage.duration);\n        const timestamp = new Date(voiceMessage.timestamp).toLocaleTimeString();\n        \n        messageElement.innerHTML = `\n            <div class=\"voice-message\">\n                <button class=\"voice-message-play\" onclick=\"window.voiceManager.playVoiceMessage('${voiceMessage.id}')\">\n                    <i class=\"fas fa-play\"></i>\n                </button>\n                <div class=\"voice-message-waveform\"></div>\n                <div class=\"voice-message-duration\">${duration}</div>\n            </div>\n            <div class=\"message-time\">${timestamp}</div>\n        `;\n        \n        messagesContainer.appendChild(messageElement);\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        \n        // Store voice message for playback\n        this.voiceMessages.set(voiceMessage.id, voiceMessage);\n    }\n    \n    async playVoiceMessage(messageId) {\n        const voiceMessage = this.voiceMessages.get(messageId);\n        if (!voiceMessage) {\n            console.error('Voice message not found:', messageId);\n            return;\n        }\n        \n        try {\n            // Stop current playback if any\n            if (this.currentlyPlaying) {\n                this.currentlyPlaying.pause();\n                this.currentlyPlaying = null;\n            }\n            \n            // Convert base64 to blob\n            const audioData = atob(voiceMessage.data);\n            const audioArray = new Uint8Array(audioData.length);\n            \n            for (let i = 0; i < audioData.length; i++) {\n                audioArray[i] = audioData.charCodeAt(i);\n            }\n            \n            const audioBlob = new Blob([audioArray], { type: voiceMessage.mimeType });\n            const audioUrl = URL.createObjectURL(audioBlob);\n            \n            // Create and play audio\n            const audio = new Audio(audioUrl);\n            this.currentlyPlaying = audio;\n            this.isPlaying = true;\n            \n            // Update play button\n            const playButton = document.querySelector(`button[onclick=\"window.voiceManager.playVoiceMessage('${messageId}')\"]`);\n            if (playButton) {\n                playButton.innerHTML = '<i class=\"fas fa-pause\"></i>';\n            }\n            \n            audio.onended = () => {\n                this.isPlaying = false;\n                this.currentlyPlaying = null;\n                URL.revokeObjectURL(audioUrl);\n                \n                if (playButton) {\n                    playButton.innerHTML = '<i class=\"fas fa-play\"></i>';\n                }\n            };\n            \n            await audio.play();\n            \n        } catch (error) {\n            console.error('Failed to play voice message:', error);\n            this.showError('Failed to play voice message');\n        }\n    }\n    \n    generateVoiceMessageId() {\n        return `voice_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    formatDuration(milliseconds) {\n        const seconds = Math.floor(milliseconds / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        \n        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n    \n    showError(message) {\n        if (window.cipherWave && window.cipherWave.uiManager) {\n            window.cipherWave.uiManager.showError(message);\n        } else {\n            console.error(message);\n        }\n    }\n    \n    destroy() {\n        // Stop any ongoing recording\n        if (this.isRecording) {\n            this.stopRecording();\n        }\n        \n        // Stop any playback\n        if (this.currentlyPlaying) {\n            this.currentlyPlaying.pause();\n            this.currentlyPlaying = null;\n        }\n        \n        // Clean up UI\n        if (this.voiceButton) {\n            this.voiceButton.remove();\n        }\n        \n        this.hideRecordingUI();\n        \n        // Remove styles\n        const styles = document.getElementById('voiceManagerStyles');\n        if (styles) {\n            styles.remove();\n        }\n        \n        // Clear voice messages\n        this.voiceMessages.clear();\n        \n        console.log('🗑️ Voice manager destroyed');\n    }\n}\n\n// Make voice manager globally accessible for onclick handlers\nwindow.voiceManager = null;"],"names":["constructor","this","maxFileSize","allowedTypes","images","videos","audio","documents","archives","uploadQueue","activeUploads","Map","compressionSettings","image","quality","maxWidth","maxHeight","video","chunkSize","thumbnailSize","width","height","console","log","setup","setupDragAndDrop","setupFileInput","setupClipboardPaste","createFileUploadUI","dropZone","document","body","addEventListener","e","preventDefault","stopPropagation","classList","add","contains","relatedTarget","remove","files","Array","from","dataTransfer","handleFileSelection","fileInput","createElement","type","multiple","style","display","id","target","appendChild","createFileShareButton","clipboardData","items","filter","item","kind","map","getAsFile","length","chatPanel","getElementById","messageInputGroup","querySelector","fileBtn","className","innerHTML","title","click","insertBefore","lastElementChild","styles","textContent","head","concat","file","validateFile","processFile","size","showError","name","Object","values","flat","some","startsWith","split","fileId","generateFileId","uploadInfo","status","progress","chunks","thumbnail","set","showUploadProgress","generateThumbnail","processedFile","compressFile","splitFileIntoChunks","sendFileMetadata","sendFileChunks","updateUploadProgress","error","message","Promise","resolve","img","Image","onload","canvas","ctx","getContext","calculateThumbnailSize","drawImage","toDataURL","src","URL","createObjectURL","originalWidth","originalHeight","ratio","Math","min","round","totalChunks","ceil","i","start","end","chunk","slice","push","index","data","fileToBase64","reject","reader","FileReader","result","onerror","readAsDataURL","metadata","timestamp","Date","now","window","cipherWave","connectionManager","sendData","chunkMessage","chunkIndex","isLast","setTimeout","messagesContainer","progressElement","formatFileSize","scrollTop","scrollHeight","progressFill","parentElement","borderColor","details","color","random","toString","substr","bytes","floor","parseFloat","pow","toFixed","uiManager","destroy","clear","voiceManager","isRecording","mediaRecorder","audioContext","analyser","microphone","recordedChunks","recordingStartTime","recordingDuration","maxRecordingTime","recordingTimer","waveformCanvas","waveformContext","animationFrame","supportedMimeTypes","selectedMimeType","voiceMessages","voiceButton","recordingIndicator","waveformContainer","currentlyPlaying","isPlaying","microphoneAccess","compressionOptions","mimeType","audioBitsPerSecond","init","requestMicrophoneAccess","detectSupportedMimeType","createVoiceUI","stream","navigator","mediaDevices","getUserMedia","echoCancellation","noiseSuppression","autoGainControl","getTracks","forEach","track","stop","Error","MediaRecorder","isTypeSupported","startRecording","stopRecording","addVoiceStyles","AudioContext","webkitAudioContext","createAnalyser","createMediaStreamSource","connect","fftSize","ondataavailable","event","onstop","processRecordedAudio","showRecordingUI","startWaveformAnimation","startRecordingTimer","state","close","hideRecordingUI","stopWaveformAnimation","stopRecordingTimer","overlay","bufferLength","frequencyBinCount","dataArray","Uint8Array","draw","requestAnimationFrame","getByteFrequencyData","fillStyle","fillRect","barWidth","barHeight","x","cancelAnimationFrame","setInterval","elapsed","minutes","seconds","timeElement","padStart","clearInterval","warn","audioBlob","Blob","audioData","blobToBase64","voiceMessage","generateVoiceMessageId","duration","sendVoiceMessage","displayVoiceMessage","blob","sender","messageElement","formatDuration","toLocaleTimeString","playVoiceMessage","messageId","get","pause","atob","audioArray","charCodeAt","audioUrl","Audio","playButton","onended","revokeObjectURL","play","milliseconds","remainingSeconds"],"mappings":"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"}