{"version":3,"mappings":"28BASA,MAAMA,EACF,WAAAC,GACIC,KAAKC,gBAAkB,KACvBD,KAAKE,eAAiB,KACtBF,KAAKG,kBAAoB,KACzBH,KAAKI,UAAY,KAGjBJ,KAAKK,YAAc,KACnBL,KAAKM,aAAe,KACpBN,KAAKO,mBAAqB,KAG1BP,KAAKQ,eAAgB,EACrBR,KAAKS,YAAc,KACnBT,KAAKU,aAAc,EAEnBV,KAAKW,MACT,CAEA,UAAMA,GACFC,QAAQC,IAAI,iCAEZ,UAEUb,KAAKc,+BAGLd,KAAKe,eAGXf,KAAKgB,sBAGLhB,KAAKQ,eAAgB,EAErBI,QAAQC,IAAI,yCAGZb,KAAKiB,uBAET,OAASC,GACLN,QAAQM,MAAM,qCAAsCA,GACpDlB,KAAKmB,0BAA0BD,EACnC,CACJ,CAEA,4BAAMJ,GAEFd,KAAKC,gBAAkB,IAAImB,QACrBpB,KAAKC,gBAAgBoB,aAG3BrB,KAAKG,kBAAoB,IAAImB,EAAkBtB,KAAKuB,mBAGpDvB,KAAKE,eAAiB,IAAIsB,EAAexB,KAAKC,iBAG9CD,KAAKI,UAAY,IAAIqB,CACzB,CAEA,kBAAMV,SACIf,KAAKI,UAAUiB,aAGrBrB,KAAKI,UAAUsB,GAAG,UAAW,CAACC,EAAQC,IAAW5B,KAAK6B,QAAQF,EAAQC,IACtE5B,KAAKI,UAAUsB,GAAG,aAAc,IAAM1B,KAAK8B,cAC3C9B,KAAKI,UAAUsB,GAAG,cAAgBK,GAAY/B,KAAKgC,YAAYD,IAC/D/B,KAAKI,UAAUsB,GAAG,kBAAmB,IAAM1B,KAAKiC,mBAChDjC,KAAKI,UAAUsB,GAAG,mBAAoB,IAAM1B,KAAKkC,mBACrD,CAEA,mBAAAlB,GAEIhB,KAAKG,kBAAkBuB,GAAG,YAAa,KACnC1B,KAAKU,aAAc,EACnBV,KAAKI,UAAU+B,uBAAuB,eAG1CnC,KAAKG,kBAAkBuB,GAAG,eAAgB,KACtC1B,KAAKU,aAAc,EACnBV,KAAKI,UAAU+B,uBAAuB,kBAG1CnC,KAAKG,kBAAkBuB,GAAG,eAAiBU,IACvCpC,KAAKqC,mBAAmBD,KAI5BpC,KAAKE,eAAewB,GAAG,mBAAqBK,IACxC/B,KAAKI,UAAUkC,eAAeP,KAIlC/B,KAAKG,kBAAkBuB,GAAG,QAAUR,IAChCN,QAAQM,MAAM,oBAAqBA,GACnClB,KAAKI,UAAUmC,UAAU,qBAAuBrB,EAAMa,UAE9D,CAGA,qBAAME,GACF,IAAKjC,KAAKK,YAAa,CACnBO,QAAQC,IAAI,8BACZ,IACI,MAAM2B,YAAEA,SAAqBC,EAAAC,UAAA,MAAAF,qBAACG,OAAO,uBAA4BC,KAAAC,KAAAC,8BACjE9C,KAAKK,YAAc,IAAImC,QACjBxC,KAAKK,YAAY0C,QACvBnC,QAAQC,IAAI,wBAChB,OAASK,GACLN,QAAQM,MAAM,iCAAkCA,GAChDlB,KAAKI,UAAUmC,UAAU,uCAC7B,CACJ,CACA,OAAOvC,KAAKK,WAChB,CAEA,sBAAM6B,GACF,IAAKlC,KAAKM,aAAc,CACpBM,QAAQC,IAAI,+BACZ,IACI,MAAMmC,aAAEA,SAAsBP,EAAAC,UAAA,MAAAM,sBAACL,OAAO,uBAA6BC,KAAAC,KAAAI,+BACnEjD,KAAKM,aAAe,IAAI0C,QAClBhD,KAAKM,aAAaK,OACxBC,QAAQC,IAAI,yBAChB,OAASK,GACLN,QAAQM,MAAM,kCAAmCA,GACjDlB,KAAKI,UAAUmC,UAAU,gCAC7B,CACJ,CACA,OAAOvC,KAAKM,YAChB,CAGA,wBAAM4C,GACF,GAAIlD,KAAKmD,WAAY,CACjBvC,QAAQC,IAAI,iCACZ,IACI,MAAMuC,cAAEA,SAAuBX,EAAAC,UAAA,MAAAU,uBAACT,OAAO,uBAA8BC,KAAAC,KAAAQ,gCACrErD,KAAKsD,cAAgB,IAAIF,QACnBpD,KAAKsD,cAAcjC,aACzBT,QAAQC,IAAI,2BAChB,OAASK,GACLN,QAAQM,MAAM,oCAAqCA,EACvD,CACJ,CACJ,CAGA,2BAAMD,GAGFL,QAAQC,IAAI,8CAChB,CAGA,aAAMgB,CAAQF,EAAQC,EAAS,qBAC3B,IAAK5B,KAAKQ,cACN,MAAM,IAAI+C,MAAM,8BAGpB,IACIvD,KAAKS,YAAckB,EACnB3B,KAAKI,UAAU+B,uBAAuB,oBAGhCnC,KAAKC,gBAAgBuD,UAAU5B,SAG/B5B,KAAKG,kBAAkB0B,QAAQF,EAEzC,OAAST,GAGL,MAFAN,QAAQM,MAAM,qBAAsBA,GACpClB,KAAKI,UAAU+B,uBAAuB,SAChCjB,CACV,CACJ,CAEA,gBAAMY,GACE9B,KAAKG,yBACCH,KAAKG,kBAAkB2B,aAEjC9B,KAAKS,YAAc,KACnBT,KAAKU,aAAc,CACvB,CAEA,iBAAMsB,CAAYyB,GACd,IAAKzD,KAAKU,YACN,MAAM,IAAI6C,MAAM,2BAGpB,IACI,MAAMG,QAAyB1D,KAAKE,eAAeyD,eAAeF,SAC5DzD,KAAKG,kBAAkByD,SAASF,GAGtC1D,KAAKI,UAAUkC,eAAe,CAC1BmB,OACAI,OAAQ,OACRC,UAAWC,KAAKC,MAChBC,WAAW,GAGnB,OAAS/C,GAGL,MAFAN,QAAQM,MAAM,0BAA2BA,GACzClB,KAAKI,UAAUmC,UAAU,0BACnBrB,CACV,CACJ,CAEA,wBAAMmB,CAAmBD,GACrB,IACI,MAAM8B,QAAyBlE,KAAKE,eAAeiE,eAAe/B,GAClEpC,KAAKI,UAAUkC,eAAe,IACvB4B,EACHL,OAAQ,OACRC,UAAWC,KAAKC,OAExB,OAAS9C,GACLN,QAAQM,MAAM,6BAA8BA,EAChD,CACJ,CAGA,eAAAK,GACI,MAAO,CACH6C,WAAY,CACR,CAAEC,KAAM,gCACR,CAAEA,KAAM,iCACR,CAAEA,KAAM,+BAAgCC,SAAU,mBAAoBC,WAAY,qBAEtFC,qBAAsB,GACtBC,mBAAoB,MACpBC,aAAc,aACdC,cAAe,UAEvB,CAEA,QAAAxB,GACI,MAAO,2DAA2DyB,KAAKC,UAAUC,UACrF,CAEA,yBAAA3D,CAA0BD,GACtB6D,SAASC,KAAKC,UAAY,gMAGNC,OAAAhE,EAAMa,QAAO,qRAMrC,EAIwB,YAAxBgD,SAASI,WACTJ,SAASK,iBAAiB,mBAAoB,KAC1CC,OAAOC,WAAa,IAAIxF,IAG5BuF,OAAOC,WAAa,IAAIxF","names":["CipherWaveApp","constructor","this","securityManager","messageManager","connectionManager","uiManager","fileManager","voiceManager","performanceMonitor","isInitialized","currentRoom","isConnected","init","console","log","initializeCoreManagers","initializeUI","setupEventListeners","preloadCriticalChunks","error","handleInitializationError","SecurityManager","initialize","ConnectionManager","getWebRTCConfig","MessageManager","UIManager","on","roomId","cipher","connect","disconnect","message","sendMessage","loadFileManager","loadVoiceManager","updateConnectionStatus","data","handleIncomingData","displayMessage","showError","FileManager","__vitePreload","async","import","then","n","f","setup","VoiceManager","v","loadMobileFeatures","isMobile","MobileManager","m","mobileManager","Error","setCipher","text","encryptedMessage","encryptMessage","sendData","sender","timestamp","Date","now","encrypted","decryptedMessage","decryptMessage","iceServers","urls","username","credential","iceCandidatePoolSize","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","test","navigator","userAgent","document","body","innerHTML","concat","readyState","addEventListener","window","cipherWave"],"ignoreList":[],"sources":["../../src/main.js"],"sourcesContent":["// CipherWave - Main Entry Point with Code Splitting\n// Enhanced modular architecture with dynamic imports\n\nimport { SecurityManager } from './managers/security-manager.js';\nimport { MessageManager } from './managers/message-manager.js';\nimport { ConnectionManager } from './managers/connection-manager.js';\nimport { UIManager } from './managers/ui-manager.js';\n\n// Core application state\nclass CipherWaveApp {\n    constructor() {\n        this.securityManager = null;\n        this.messageManager = null;\n        this.connectionManager = null;\n        this.uiManager = null;\n        \n        // Lazy-loaded managers\n        this.fileManager = null;\n        this.voiceManager = null;\n        this.performanceMonitor = null;\n        \n        // Application state\n        this.isInitialized = false;\n        this.currentRoom = null;\n        this.isConnected = false;\n        \n        this.init();\n    }\n    \n    async init() {\n        console.log('üöÄ Initializing CipherWave...');\n        \n        try {\n            // Initialize core managers\n            await this.initializeCoreManagers();\n            \n            // Initialize UI\n            await this.initializeUI();\n            \n            // Set up event listeners\n            this.setupEventListeners();\n            \n            // Mark as initialized\n            this.isInitialized = true;\n            \n            console.log('‚úÖ CipherWave initialized successfully');\n            \n            // Pre-load critical chunks in background\n            this.preloadCriticalChunks();\n            \n        } catch (error) {\n            console.error('‚ùå Failed to initialize CipherWave:', error);\n            this.handleInitializationError(error);\n        }\n    }\n    \n    async initializeCoreManagers() {\n        // Initialize security manager with single crypto library\n        this.securityManager = new SecurityManager();\n        await this.securityManager.initialize();\n        \n        // Initialize connection manager\n        this.connectionManager = new ConnectionManager(this.getWebRTCConfig());\n        \n        // Initialize message manager\n        this.messageManager = new MessageManager(this.securityManager);\n        \n        // Initialize UI manager\n        this.uiManager = new UIManager();\n    }\n    \n    async initializeUI() {\n        await this.uiManager.initialize();\n        \n        // Bind UI events to manager methods\n        this.uiManager.on('connect', (roomId, cipher) => this.connect(roomId, cipher));\n        this.uiManager.on('disconnect', () => this.disconnect());\n        this.uiManager.on('sendMessage', (message) => this.sendMessage(message));\n        this.uiManager.on('loadFileManager', () => this.loadFileManager());\n        this.uiManager.on('loadVoiceManager', () => this.loadVoiceManager());\n    }\n    \n    setupEventListeners() {\n        // Connection events\n        this.connectionManager.on('connected', () => {\n            this.isConnected = true;\n            this.uiManager.updateConnectionStatus('connected');\n        });\n        \n        this.connectionManager.on('disconnected', () => {\n            this.isConnected = false;\n            this.uiManager.updateConnectionStatus('disconnected');\n        });\n        \n        this.connectionManager.on('dataReceived', (data) => {\n            this.handleIncomingData(data);\n        });\n        \n        // Message events\n        this.messageManager.on('messageDecrypted', (message) => {\n            this.uiManager.displayMessage(message);\n        });\n        \n        // Error handling\n        this.connectionManager.on('error', (error) => {\n            console.error('Connection error:', error);\n            this.uiManager.showError('Connection error: ' + error.message);\n        });\n    }\n    \n    // Dynamic loading of heavy UI components\n    async loadFileManager() {\n        if (!this.fileManager) {\n            console.log('üìÅ Loading file manager...');\n            try {\n                const { FileManager } = await import('./managers/file-manager.js');\n                this.fileManager = new FileManager();\n                await this.fileManager.setup();\n                console.log('‚úÖ File manager loaded');\n            } catch (error) {\n                console.error('‚ùå Failed to load file manager:', error);\n                this.uiManager.showError('Failed to load file sharing features');\n            }\n        }\n        return this.fileManager;\n    }\n    \n    async loadVoiceManager() {\n        if (!this.voiceManager) {\n            console.log('üé§ Loading voice manager...');\n            try {\n                const { VoiceManager } = await import('./managers/voice-manager.js');\n                this.voiceManager = new VoiceManager();\n                await this.voiceManager.init();\n                console.log('‚úÖ Voice manager loaded');\n            } catch (error) {\n                console.error('‚ùå Failed to load voice manager:', error);\n                this.uiManager.showError('Failed to load voice features');\n            }\n        }\n        return this.voiceManager;\n    }\n    \n    // Load mobile-specific features only when needed\n    async loadMobileFeatures() {\n        if (this.isMobile()) {\n            console.log('üì± Loading mobile features...');\n            try {\n                const { MobileManager } = await import('./managers/mobile-manager.js');\n                this.mobileManager = new MobileManager();\n                await this.mobileManager.initialize();\n                console.log('‚úÖ Mobile features loaded');\n            } catch (error) {\n                console.error('‚ùå Failed to load mobile features:', error);\n            }\n        }\n    }\n    \n    // Preload critical chunks in background\n    async preloadCriticalChunks() {\n        // Preload will be handled by Vite's chunk splitting\n        // WebRTC chunks will be loaded automatically when needed\n        console.log('üöÄ Critical chunks will be loaded on demand');\n    }\n    \n    // Core application methods\n    async connect(roomId, cipher = 'chacha20-poly1305') {\n        if (!this.isInitialized) {\n            throw new Error('CipherWave not initialized');\n        }\n        \n        try {\n            this.currentRoom = roomId;\n            this.uiManager.updateConnectionStatus('connecting');\n            \n            // Set encryption cipher\n            await this.securityManager.setCipher(cipher);\n            \n            // Establish connection\n            await this.connectionManager.connect(roomId);\n            \n        } catch (error) {\n            console.error('Connection failed:', error);\n            this.uiManager.updateConnectionStatus('error');\n            throw error;\n        }\n    }\n    \n    async disconnect() {\n        if (this.connectionManager) {\n            await this.connectionManager.disconnect();\n        }\n        this.currentRoom = null;\n        this.isConnected = false;\n    }\n    \n    async sendMessage(text) {\n        if (!this.isConnected) {\n            throw new Error('Not connected to a room');\n        }\n        \n        try {\n            const encryptedMessage = await this.messageManager.encryptMessage(text);\n            await this.connectionManager.sendData(encryptedMessage);\n            \n            // Display message locally\n            this.uiManager.displayMessage({\n                text,\n                sender: 'self',\n                timestamp: Date.now(),\n                encrypted: true\n            });\n            \n        } catch (error) {\n            console.error('Failed to send message:', error);\n            this.uiManager.showError('Failed to send message');\n            throw error;\n        }\n    }\n    \n    async handleIncomingData(data) {\n        try {\n            const decryptedMessage = await this.messageManager.decryptMessage(data);\n            this.uiManager.displayMessage({\n                ...decryptedMessage,\n                sender: 'peer',\n                timestamp: Date.now()\n            });\n        } catch (error) {\n            console.error('Failed to decrypt message:', error);\n        }\n    }\n    \n    // Utility methods\n    getWebRTCConfig() {\n        return {\n            iceServers: [\n                { urls: 'stun:stun.l.google.com:19302' },\n                { urls: 'stun:stun1.l.google.com:19302' },\n                { urls: 'turn:openrelay.metered.ca:80', username: 'openrelayproject', credential: 'openrelayproject' }\n            ],\n            iceCandidatePoolSize: 10,\n            iceTransportPolicy: 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require'\n        };\n    }\n    \n    isMobile() {\n        return /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    }\n    \n    handleInitializationError(error) {\n        document.body.innerHTML = `\n            <div style=\"color: #ff6b6b; text-align: center; padding: 50px; font-family: monospace;\">\n                <h2>CipherWave Initialization Failed</h2>\n                <p>Error: ${error.message}</p>\n                <button onclick=\"location.reload()\" style=\"margin-top: 20px; padding: 10px 20px; background: #0088cc; color: white; border: none; border-radius: 5px; cursor: pointer;\">\n                    Retry\n                </button>\n            </div>\n        `;\n    }\n}\n\n// Initialize application when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        window.cipherWave = new CipherWaveApp();\n    });\n} else {\n    window.cipherWave = new CipherWaveApp();\n}\n\n// Export for testing\nexport { CipherWaveApp };"],"file":"assets/main-BypHilGW.js"}